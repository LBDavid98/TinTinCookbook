[0m#LOG: LOGGING OUTPUT TO 'help_files.txt' FILESIZE: 0[0m
#help action;#help cat;#help coordinates;#help echo;#help foreach;#help history;#help line;#help mapping;#help nop;#help regexp;#help script;#help ssl;#help textin;#help alias;#help characters;#help cr;#help edit;#help format;#help if;#help list;#help math;#help parse;#help repeat;#help send;#help statements;#help ticker;#help all;#help chat;#help cursor;#help editing;#help function;#help ignore;#help lists;#help mathematics;#help path;#help replace;#help session;#help substitute;#help time;#help bell;#help class;#help daemon;#help else;#help gag;#help index;#help local;#help message;#help pathdir;#help return;#help sessionname;#help substitutions;#help triggers;#help break;#help colors;#help debug;#help elseif;#help greeting;#help info;#help log;#help metric_system;#help pcre;#help run;#help showme;#help suspend;#help variable;#help buffer;#help commands;#help default;#help end;#help grep;#help introduction;#help loop;#help mouse;#help port;#help scan;#help snoop;#help switch;#help while;#help button;#help config;#help delay;#help escape_codes;#help help;#help keypad;#help macro;#help msdp;#help prompt;#help screen;#help speedwalk;#help system;#help write;#help case;#help continue;#help draw;#help event;#help highlight;#help kill;#help map;#help mslp;#help read;#help screen_reader;#help split;#help tab;#help zap
[1;37mCommand[22;37m: #action [1;37m{[22;37mmessage[1;37m} {[22;37mcommands[1;37m} {[22;37mpriority[1;37m}

[22;37m         The #action command can be used to respond with one or several
[22;37m         commands to a specific message sent by the server. The %1-%99
[22;37m         variables are substituted from the message and can be used in the
[22;37m         command part of the action.

[22;37m         If the message starts with a ~ color codes must be matched. You can
[22;37m         enable #config {convert meta} on to display meta characters.

[22;37m         For more information on pattern matching see the section on PCRE.

[1;37mExample[22;37m: #action {%1 tells you '%2'} {tell %1 I'm afk.}

[22;37m         Actions can be triggered by the #show command. If you don't want a
[22;37m         #show to get triggered use: #line ignore #show {text}

[22;37m         Actions are ordered alphabetically and only one action can trigger at
[22;37m         a time. To change the order you can assign a priority, which defaults
[22;37m         to 5, with a lower number indicating a higher priority. The priority
[22;37m         can be a floating point number and should be between 1 and 9.

[22;37m         To remove an action with %* as the message, use #unaction {%%*} or
[22;37m         #unaction {\%*}. Alternatively you could wrap the action inside a
[22;37m         class, and kill that class when you no longer need the action.

[1;37mComment[22;37m: You can remove an action with the #unaction command.
[0m
[1;37mRelated[22;37m: pcre, gag, highlight, prompt and substitute.[0m

[1;37mCommand[22;37m: #cat [1;37m{[22;37mvariable[1;37m} {[22;37margument[1;37m}

[22;37m         The cat command will concatenate the argument to the given variable.
[0m
[1;37mRelated[22;37m: format, function, local, math, replace, script and variable.[0m


[22;37m         When the 0,0 coordinate is in the upper left corner TinTin++ uses
[22;37m         a y,x / row,col notation, starting at 1,1. Subsequently -1,-1
[22;37m         will indicate the bottom right corner. This type of argument is
[22;37m         used by the #showme command.

[22;37m         When the 0,0 coordinate is in the bottom left corner tintin uses
[22;37m         a standard x,y notation. This type of argument is used by the
[22;37m         #map jump command.

[22;37m         The vast majority of tintin commands use y,x / row,col notation,
[22;37m         primarily because that is the notation used by the VT100 standard
[22;37m         used for terminal emulation.

[22;37m         [1;32mSquares

[22;37m         A square argument takes 2 coordinates. The first coordinate defines
[22;37m         the upper left corner, the last coordinate defines the bottom
[22;37m         right corner. The upper left corner of the terminal is defined as
[22;37m         1,1 and the bottom right corner as -1,-1. This type of argument is
[22;37m         used by #draw, #button and #map offset.

[22;37m         [1;32mPanes

[22;37m         A pane argument takes 4 size values, which are: top pane, bottom
[22;37m         pane, left pane, right pane. When a negative value is provided the
[22;37m         size is the maximum size, minus the value. This type of argument
[22;37m         is used by the #split command.

[22;37m         [1;32mRanges

[22;37m         A range argument takes 2 values known as the upper bound and lower
[22;37m         bound. The upper bound (first value) defines the start of the
[22;37m         range, the lower bound (second value) the end. The first index of
[22;37m         a range is defined as 1. When a negative value is provides the last
[22;37m         index is defined as -1. This type of argument is used by #buffer
[22;37m         and #variable.
[0m
[1;37mRelated[22;37m: characters, colors, escape_codes, mathematics and pcre.[0m

[1;37mCommand[22;37m: #echo [1;37m{[22;37mformat[1;37m} {[22;37margument1[1;37m} {[22;37margument2[1;37m} {[22;37metc[1;37m}

[22;37m         Echo command displays text on the screen with formatting options. See
[22;37m         the help file for the format command for more information.

[22;37m         The echo command does not trigger actions.

[22;37m         As with the #show command you can split the {format} argument up into
[22;37m         two braced arguments, in which case the 2nd argument is the row number.

[1;37mExample[22;37m: #echo {The current date is %t.} {%Y-%m-%d %H:%M:%S}
[22;37m         #echo {[%38s][%-38s]} {Hello World} {Hello World}
[22;37m         #echo {{this is %s on the top row} {1}} {printed}
[0m
[1;37mRelated[22;37m: buffer, format, grep and showme.[0m

[1;37mCommand[22;37m: #foreach [1;37m{[22;37mlist[1;37m} {[22;37mvariable[1;37m} {[22;37mcommands[1;37m}

[22;37m         For each item in the provided list the foreach statement will update
[22;37m         the given variable and execute the command part of the statement. List
[22;37m         elements must be separated by braces or semicolons.

[1;37mExample[22;37m: #foreach {bob;tim;kim} {name} {tell $name Hello}
[1;37mExample[22;37m: #foreach {{bob}{tim}{kim}} {name} {tell $name Hello}
[0m
[1;37mRelated[22;37m: break, continue, list, loop, parse, repeat, return and while.[0m

[1;37mCommand[22;37m: #history [1;37m{[22;37mdelete[1;37m}[22;37m                    Delete the last command.
[22;37m         #history [1;37m{[22;37mget[1;37m}    {[22;37mvariable[1;37m} {[22;37mrange[1;37m}[22;37m Store list in variable.
[22;37m         #history [1;37m{[22;37minsert[1;37m} {[22;37mcommand[1;37m}[22;37m          Insert a command.
[22;37m         #history [1;37m{[22;37mlist[1;37m}     [22;37m                 Display the command history.
[22;37m         #history [1;37m{[22;37mread[1;37m}   {[22;37mfilename[1;37m}[22;37m         Read a command history from file.
[22;37m         #history [1;37m{[22;37mwrite[1;37m}  {[22;37mfilename[1;37m}[22;37m         Write a command history to file.

[22;37m         Without an argument all available options are shown.

[22;37m         By default all commands are saved to the history list and the history
[22;37m         list is saved between sessions in the ~/.tintin/history.txt file.

[22;37m         You can set the character to repeat a command in the history with the
[22;37m         #config {REPEAT CHAR} {<character>} configuration option, by default
[22;37m         this is set to the exclamation mark.

[22;37m         You can use ! by itself to repeat the last command, or !<text> to
[22;37m         repeat the last command starting with the given text.

[22;37m         You can use #config {REPEAT ENTER} {ON} to repeat the last command
[22;37m         when you press enter on an empty line.

[22;37m         You can press ctrl-r to enter an interactive regex enabled history
[22;37m         search mode, or by issuing #cursor {history search}.

[22;37m         TinTin++ tries to bind the arrow up and down keys to scroll through
[22;37m         the history list by default. You can bind these with a macro yourself
[22;37m         using #cursor {history next} and #cursor {history prev}. Many #cursor
[22;37m         commands only work properly when bound with a macro.
[0m
[1;37mRelated[22;37m: alias, cursor, keypad, macro, speedwalk and tab.[0m

[1;37mCommand[22;37m: #line [1;37m{[22;37moption[1;37m} {[22;37margument[1;37m}

[22;37m         [1;32mLine options that alter the argument.

[22;37m         [1;37m#line json <variable> <argument>
[22;37m           The variable is translated to json and the argument is executed
[22;37m           with &0 holding the json data.

[22;37m         [1;37m#line strip <argument>
[22;37m           Argument is executed with all color codes stripped.

[22;37m         [1;37m#line substitute <options> <argument>
[22;37m           Argument is executed using the provided substitutions, available
[22;37m           options are: arguments, braces, colors, escapes, functions, secure,
[22;37m           and variables.

[22;37m         [1;32mLine options that alter how the line is executed.

[22;37m         [1;37m#line background <argument>
[22;37m           Prevent new session activation.

[22;37m         [1;37m#line benchmark <argument>
[22;37m           Argument is executed and the elapsed time is reported after.

[22;37m         [1;37m#line capture <variable> <argument>
[22;37m           Argument is executed and output stored in <variable>.

[22;37m         [1;37m#line convert <argument>
[22;37m           Argument is executed with escaped meta characters.

[22;37m         [1;37m#line debug <argument>
[22;37m           Argument is executed in debug mode.

[22;37m         [1;37m#line gag [amount]
[22;37m           Gag the next line, or given lines. Use + or - to increase
[22;37m           or decrease the current amount.

[22;37m         [1;37m#line ignore {argument}
[22;37m           Argument is executed without any triggers being checked.

[22;37m         [1;37m#line local {argument}
[22;37m           Argument is executed with all newly and indirectly
[22;37m           created variables being local.

[22;37m         [1;37m#line log <filename> [text]
[22;37m           Log the next line to file unless the [text] argument is
[22;37m           provided.

[22;37m         [1;37m#line logmode <option> <argument>
[22;37m           Argument is executed using the provided logmode, available
[22;37m           modes are: html, plain, raw, and stamp.

[22;37m         [1;37m#line msdp <argument>
[22;37m           Turn the argument into an msdp telnet sequence, starting at the
[22;37m           first opening brace. Will turn tintin tables into msdp tables,
[22;37m           with semicolons being used to create msdp arrays.

[22;37m         [1;37m#line multishot <number> <argument>
[22;37m           Argument is executed in multishot mode, all triggers created
[22;37m           will only fire the given number of times.

[22;37m         [1;37m#line oneshot <argument>
[22;37m           Argument is executed in oneshot mode, all triggers created will
[22;37m           only fire once.

[22;37m         [1;37m#line quiet <argument>
[22;37m           Argument is executed with suppression of most system messages.

[22;37m         [1;37m#line verbatim <argument>
[22;37m           Argument is executed verbatim, prohibiting variable and function
[22;37m           substitutions.

[22;37m         [1;37m#line verbose <argument>
[22;37m           Argument is executed with most system messages enabled.

[22;37m         When using #line log and logging in html format use \c< \c> \c& \c" to
[22;37m         log a literal < > & and ".
[0m
[1;37mRelated[22;37m: class and config.[0m


[22;37m         TinTin++ has a powerful automapper that uses a room system similar to
[22;37m         Diku MUDs which means that odd map layouts and weird exit
[22;37m         configurations aren't a problem. The mapper provides tools to improve
[22;37m         the visual map display. For basic path tracking see #help PATH.

[1;37m         #map create [size]

[22;37m         This command creates the initial map. The size is 50,000 by default
[22;37m         and can be changed at any time with the #map resize command. If you
[22;37m         play a MUD that uses MSDP or GMCP to provide room numbers you'll have
[22;37m         to increase it to the highest reported room number. Increasing the
[22;37m         size of the map doesn't decrease performance.

[1;37m         #map goto <location>

[22;37m         When you create the map you are not automatically inside the map. By
[22;37m         default room number (vnum) 1 is created, so you can go to it using
[22;37m         #map goto 1. Once you are inside the map new rooms are automatically
[22;37m         created as you move around. Movement commands are defined with the
[22;37m         #pathdir command. By default n, ne, e, se, s, sw, w, nw, u, d are
[22;37m         defined.

[22;37m         [1;37m#map map <rows> <cols> <append|overwrite|list|variable> <name>

[22;37m         To see the map you can use #map map. It's annoying to have to
[22;37m         constantly type #map map however. Instead it's possible to use #split
[22;37m         to display a vt100 map. To do so execute:

[22;37m         [1;37m#split 16 1
[22;37m         #map flag vtmap on

[22;37m         The first command sets the top split lines to 16 and the bottom split
[22;37m         line to 1. If you want a smaller or larger map display you can use a
[22;37m         different value than 16.

[22;37m         If you don't need to display diagonal exits and prefer a more compact
[22;37m         look you can use #map flag AsciiGraphics off. This will enable the
[22;37m         standard display which uses UTF-8 box drawing characters, results may
[22;37m         vary depending on the font used.

[22;37m         If your terminal supports UTF-8 you can also give #map flag unicode on
[22;37m         a try.

[22;37m         If you want to display the map in a different location of the screen
[22;37m         use something like:

[22;37m         [1;37m#split 0 1 0 -80
[22;37m         #map offset 1 81 -4 -1

[22;37m         This will display the map on the right side of the screen, if the
[22;37m         width of the screen is wide enough.

[22;37m         [1;37m#map undo

[22;37m         If you accidentally walk into the wall on your MUD the mapper will
[22;37m         still create a new room. You can easily fix this mistake by using
[22;37m         #map undo. If you want to move around on the map without moving around
[22;37m         on the MUD you can use: #map move {direction}. To delete a room
[22;37m         manually you can use: #map delete {direction}. To create a room
[22;37m         manually you can use: #map dig {direction}.

[22;37m         [1;37m#map write <filename>

[22;37m         You can save your map using #map write, to load a map you can use
[22;37m         #map read <filename>. You can return to the room you were in when
[22;37m         the map was last saved by using #map return. You can use #event to
[22;37m         automatically read and write the map on session start and end.

[22;37m         [1;37m#map set <option> <value>

[22;37m         You can set the room name using #map set roomname <name>. You either
[22;37m         have to do this manually or create triggers to set the room name
[22;37m         automatically. Once the room name is set you can use #map goto with
[22;37m         the room name to visit it. If there are two rooms with the same name
[22;37m         #map goto will go to the most nearby room. If you want to always go
[22;37m         to the same room you should memorize the room number or create a
[22;37m         landmark.

[22;37m         [1;37m#map landmark firstroom 1

[22;37m         You can further narrow down the matches by providing additional
[22;37m         arguments, for example:

[22;37m         [1;37m#map goto {dark alley} {roomexits} {n;e} {roomarea} {Haddock Ville}

[22;37m         You can set the room weight using #map set roomweight {value}. The
[22;37m         weight by default is set to 1.0 and it represents the difficulty of
[22;37m         traversing the room. If you have a lake as an alternative route, and
[22;37m         traversing water rooms is 4 times slower than regular rooms, then you
[22;37m         could set the weight of the lake rooms to 4.0. If the lake is 3 rooms
[22;37m         wide the total weight is 12. If walking around the lake has a weight
[22;37m         less than 12 the mapper will go around the lake, if the weight is
[22;37m         greater than 12 the mapper will take a route through the lake.

[22;37m         You can set the room symbol using #map set roomsymbol {value}. The
[22;37m         symbol should be one, two, or three characters, which can be
[22;37m         colorized. You can for example mark shops with an 'S' and colorize the
[22;37m         'S' depending on what type of shop it is.

[22;37m         [1;37m#map run <location> <delay>

[22;37m         The run command will have tintin find the shortest path to the given
[22;37m         location and execute the movement commands to get there. You can
[22;37m         provide a delay in seconds with floating point precision, for example:

[22;37m         [1;37m#map run {dark alley} {0.5}

[22;37m         This will make you walk towards the nearest dark alley with 0.5 second
[22;37m         intervals. Typical MUDs accept commands at 0.25 second intervals.

[22;37m         [1;37m#map insert {direction} {flag}

[22;37m         The insert command is useful for adding spacer rooms called void rooms.
[22;37m         Often rooms overlap, and by adding void rooms you can stretch out
[22;37m         exits. For example: #map insert north void. You cannot enter void rooms
[22;37m         once they've been created, so you'll have to use #map info in an
[22;37m         adjacent room to find the room vnum, then use #map goto {vnum} to
[22;37m         visit.

[22;37m         It's also possible to align rooms using void rooms. This is easily
[22;37m         done using #map insert north void.
[0m
[1;37mRelated[22;37m: map, path and pathdir.[0m

[1;37mCommand[22;37m: #nop [1;37m{[22;37mwhatever[1;37m}

[22;37m         Short for 'no operation', and is ignored by the client.  It is useful
[22;37m         for commenting in your coms file, any text after the nop and before a
[22;37m         semicolon or end of line is ignored. You shouldn't put braces { } in it
[22;37m         though, unless you close them properly.

[22;37m         A valid alternative for #nop is #0.

[1;37mComment[22;37m: By using braces you can comment out multiple lines of code in a script
[22;37m         file.

[22;37m         For commenting out an entire trigger and especially large sections of
[22;37m         triggers you would want to use /* text */

[1;37mExample[22;37m: #nop This is the start of my script file.
[0m
[1;37mRelated[22;37m: read[0m

[1;37mCommand[22;37m: #regexp [1;37m{[22;37mstring[1;37m} {[22;37mexpression[1;37m} {[22;37mtrue[1;37m} {[22;37mfalse[1;37m}

[22;37m         Compares the string to the given regular expression.

[22;37m         The expression can contain escapes, and if you want to match a literal
[22;37m         \ character you'll have to use \\ to match a single backslash.

[22;37m         Variables are stored in &1 to &99 with &0 holding the matched
[22;37m         substring.

[22;37m         The #regex command is not a proper statement like #if, when using
[22;37m         #return or #break in the {true} argument it won't terminate any loop
[22;37m         the #regex command is nested within.

[1;37m       ^ [22;37mforce match of start of line.
[1;37m       $ [22;37mforce match of end of line.
[1;37m       \ [22;37mescape one character.
[1;37m  %1-%99 [22;37mlazy match of any text, available at %1-%99.
[1;37m      %0 [22;37mshould be avoided in triggers, and if left alone lists all matches.
[1;37m     { } [22;37membed a raw regular expression, matches are stored to %1-%99.
[1;37m   %!{ } [22;37membed a raw regular expression, matches are not stored.

[1;37m         [22;37m[ ] . + | ( ) ? * are treated as normal text unlessed used within
[1;37m         [22;37mbraces. Keep in mind that { } is replaced with ( ) automatically
[1;37m         [22;37munless %!{ } is used.

[22;37m         Of the following the (lazy) match is available at %1-%99 + 1

[1;37m      %a [22;37mmatch zero or more characters including newlines.
[1;37m      %A [22;37mmatch zero or more newlines.
[1;37m      %c [22;37mmatch zero or more ansi color codes.
[1;37m      %d [22;37mmatch zero or more digits.
[1;37m      %D [22;37mmatch zero or more non digits.
[1;37m      %s [22;37mmatch zero or more spaces.
[1;37m      %S [22;37mmatch zero or more non spaces.
[1;37m      %w [22;37mmatch zero or more word characters.
[1;37m      %W [22;37mmatch zero or more non word characters.

      Experimental (subject to change) matches are:

[1;37m      %p [22;37mmatch zero or more printable characters.
[1;37m      %P [22;37mmatch zero or more non printable characters.
[1;37m      %u [22;37mmatch zero or more unicode characters.
[1;37m      %U [22;37mmatch zero or more non unicode characters.

      If you want to match 1 digit use %+1d, if you want to match between 3
      and 5 spaces use %+3..5s, if you want to match 0 or more word
      characters use %+0..w, etc.

[1;37m      %+ [22;37mmatch one or more characters.
[1;37m      %? [22;37mmatch zero or one character.
[1;37m      %. [22;37mmatch one character.
[1;37m      %* [22;37mmatch zero or more characters.

[1;37m      %i [22;37mmatching becomes case insensitive.
[1;37m      %I [22;37mmatching becomes case sensitive (default).

[22;37m         The match is automatically stored to a value between %1 and %99
[22;37m         starting at %1 and incrementing by 1 for every regex. If you use
[22;37m         %15 as a regular expression, the next unnumbered regular expression
[22;37m         would be %16. To prevent a match from being stored use %!*, %!w, etc.

[1;37mExample[22;37m: #regexp {bli bla blo} {bli {.*} blo} {#show &1}

[1;37mComment[22;37m: Like an alias or function #regex has its own scope.
[0m
[1;37mRelated[22;37m: pcre and replace.[0m

[1;37mCommand[22;37m: #script [1;37m{[22;37mvariable[1;37m} {[22;37mshell command[1;37m}

[22;37m         The script command works much like the system command except that it
[22;37m         treats the generated echos as commands if no variable is provided.

[22;37m         This is useful for running php, perl, ruby, and python scripts. You
[22;37m         can run these scripts either from file or from within tintin if the
[22;37m         scripting language allows this.

[22;37m         If you provide a variable the output of the script is stored as a list.

[1;37mExample[22;37m: #script {ruby -e 'print "#show hello world"'}
[1;37mExample[22;37m: #script {python -c 'print "#show hello world"'}
[1;37mExample[22;37m: #script {php -r 'echo "#show hello world"'}
[1;37mExample[22;37m: #script {path} {pwd};#show The path is $path[1].
[0m
[1;37mRelated[22;37m: format, function, local, math, replace and variable.[0m

[1;37mCommand[22;37m: #ssl [1;37m{[22;37mname[1;37m} {[22;37mhost[1;37m} {[22;37mport[1;37m} {[22;37mfile[1;37m}

[22;37m         Starts a secure socket telnet session with the given name, host, port,
[22;37m         and optional file name.
[0m
[1;37mRelated[22;37m: all, port, run, sessionname, snoop, ssl and zap.[0m

[1;37mCommand[22;37m: #textin [1;37m{[22;37mfilename[1;37m} {[22;37mdelay[1;37m}

[22;37m         Textin allows the user to read in a file, and send its contents
[22;37m         directly to the server.  Useful for doing online creation, or message
[22;37m         writing.

[22;37m         The delay is in seconds and takes a floating point number which is
[22;37m         cumulatively applied to each outgoing line.
[0m
[1;37mRelated[22;37m: scan and send.[0m

[1;37mCommand[22;37m: #alias [1;37m{[22;37mname[1;37m} {[22;37mcommands[1;37m} {[22;37mpriority[1;37m}

[22;37m         The #alias command can be used to shorten up long or oftenly used
[22;37m         commands. The %1-99 variables are substituted from the arguments when
[22;37m         using an alias and represent the 1st till 99th word which can be used
[22;37m         in the commands part of the alias. If %0 is used it will contain all
[22;37m         arguments. The priority part is optional and determines the priority
[22;37m         of the alias, it defaults to 5.

[22;37m         If no % variable is used in the commands section any argument will be
[22;37m         appended to the end as if %0 was used. This feature might be removed
[22;37m         in the future, and shouldn't be used.

[1;37mExample[22;37m: #alias {k} {kill %1;kick}

[22;37m         Typing 'k orc' would result in attacking the orc followed by a kick.

[22;37m         You can create multi-word aliases by using variables in the name
[22;37m         section.

[1;37mExample[22;37m: #alias {k %1 with %2} {draw %2;attack %1;slash %1 with %2;
[22;37m           kick at %2;strike %1 with %2}

[22;37m         Using the above alias you could type k blue smurf with battle axe

[22;37m         To have an alias that matches all user input, use %* as the name.

[1;37mExample[22;37m: #alias {%*} {#show You wrote: %0}

[22;37m         Aliases are ordered alphabetically and only one alias can trigger at
[22;37m         a time. To change the order you can assign a priority, which defaults
[22;37m         to 5, with a lower number indicating a higher priority. The priority
[22;37m         can be a floating point number.

[22;37m         To remove an alias with %* as the name, use #unalias {%%*} or #unalias
[22;37m         {\%*}. Alternatively you can wrap the alias inside a class, and kill
[22;37m         that class when you no longer need the alias.

[22;37m         For more information on pattern matching see the section on PCRE.

[1;37mComment[22;37m: You can remove an alias with the #unalias command.
[0m
[1;37mRelated[22;37m: cursor, history, keypad, macro, speedwalk and tab.[0m


[22;37m         The following special characters are defined:

[1;37m#        [22;37mThe hashtag is the default character for starting a command and is
[22;37m         subsequently known as the command character or tintin character.
[22;37m         When loading a command file the command character is set to the
[22;37m         first character in the file. The character can also be redefined
[22;37m         using #config.

[1;37m;        [22;37mThe semi-colon is used as the command separator and can be used to
[22;37m         separate two commands. Multiple commands can be strung together as
[22;37m         well. Trailing semi-colons are ignored when reading a script file
[22;37m         as this is a common error.

[1;37m{ }      [22;37mCurly brackets aka braces are used for separating multi word command
[22;37m         arguments, nesting commands, and nesting variables. Braces cannot
[22;37m         easily be escaped and must always be used in pairs.

[1;37m" "      [22;37mQuote characters are used for strings in the #math, #if, #switch,
[22;37m         and #case commands. It is however suggested to use a set of braces
[22;37m         { } to define strings instead, particularly when checking strings
[22;37m         that may contain quotes.

[1;37m!        [22;37mThe exclamation sign is used to repeat commands, see #help history.
[22;37m         The character can be redefined using #config.

[1;37m\        [22;37mAn input line starting with a backslash is sent verbatim if you are
[22;37m         connected to a server. This character can be configured with
[22;37m         #config, and is itself sent verbatim when the verbatim config mode
[22;37m         is enabled.
[0m
[1;37mRelated[22;37m: colors, escape_codes, function, mathematics, pcre and variable.[0m

[1;37mCommand[22;37m: #cr

[22;37m         Sends a carriage return to the session.  Useful for aliases that need
[22;37m         extra carriage returns.

[22;37m         This command is obsolete as you can accomplish the same using #send
[22;37m         without an argument or #send {}.
[0m
[1;37mRelated[22;37m: forall[0m

[1;37mCommand[22;37m: #edit [1;37m{[22;37moption[1;37m} [[22;37margument[1;37m]

[22;37m         The edit command can be used to turn the default line editor into a
[22;37m         text editor.

[22;37m         [1;37m#edit create [filename] [arguments]
[22;37m           Create an editor, initialize using the provided arguments.

[22;37m         [1;37m#edit load <variable>
[22;37m           Create an editor, initialize using the provided list variable.

[22;37m         [1;37m#edit read <filename>
[22;37m           Create an editor, initialize using the provided file.

[22;37m         [1;37m#edit resume
[22;37m           Resume editing after a suspension.

[22;37m         [1;37m#edit save <variable>
[22;37m           Save the editor to the provided variable.

[22;37m         [1;37m#edit suspend
[22;37m           Suspend editing, similar to pressing enter except that no
[22;37m           events are triggered.

[22;37m         [1;37m#edit write [filename]
[22;37m           Write the editor content to file.

[1;37mExample[22;37m: #edit create {bla.txt} {line 1} {line 2}
[0m
[1;37mRelated[22;37m: cursor and macro.[0m

[1;37mCommand[22;37m: #format [1;37m{[22;37mvariable[1;37m} {[22;37mformat[1;37m} {[22;37margument1[1;37m} {[22;37margument2[1;37m} {[22;37metc[1;37m}

[22;37m         Allows you to store a string into a variable in the exact same way
[22;37m         C's sprintf works with a few enhancements and limitations like a
[22;37m         maximum of 30 arguments.

[22;37m         If you use #format inside an alias or action you must escape %1s as
[22;37m         %+1s or %%1s or %\1s so the %1 isn't substituted by the trigger.

[22;37m         #format {test} {%+9s} {string}  pad string with up to 9 spaces
[22;37m         #format {test} {%-9s} {string}  post pad string with up to 9 spaces
[22;37m         #format {test} {%.8s} {string}  copy at most 8 characters
[22;37m         #format {test} {%a}   {number}  print corresponding charset character
[22;37m         #format {test} {%c}   {string}  use a highlight color name
[22;37m         #format {test} {%d}   {number}  print a number with integer formatting
[22;37m         #format {test} {%f}   {string}  perform floating point math
[22;37m         #format {test} {%g}   {number}  perform thousand grouping on {number}
[22;37m         #format {test} {%h}   {string}  turn text into a header line
[22;37m         #format {test} {%l}   {string}  lowercase text
[22;37m         #format {test} {%m}   {string}  perform mathematical calculation
[22;37m         #format {test} {%n}     {name}  capitalize the first letter
[22;37m         #format {test} {%p}   {string}  strip leading and trailing spaces
[22;37m         #format {test} {%r}   {string}  reverse text, hiya = ayih
[22;37m         #format {test} {%s}   {string}  print given string
[22;37m         #format {test} {%t}   {format}  display time with strftime format
[22;37m                                         optional {{format}{time}} syntax
[22;37m         #format {test} {%u}   {string}  uppercase text
[22;37m         #format {list} {%w}   {string}  store word wrapped text in {list}
[22;37m                                         optional {{string}{width}} syntax
[22;37m         #format {test} {%x}      {hex}  print corresponding charset character
[22;37m         #format {test} {%A}     {char}  store corresponding character value
[22;37m         #format {test} {%D}      {hex}  convert hex to decimal in {test}
[22;37m         #format {hash} {%H}   {string}  store a 64 bit string hash in {hash}
[22;37m         #format {test} {%L}   {string}  store the string length in {test}
[22;37m         #format {test} {%M}   {number}  convert number to metric in {test}
[22;37m         #format {test} {%S}   {string}  store the number of spelling errors
[22;37m         #format {time} {%T}         {}  store the epoch time in {time}
[22;37m         #format {time} {%U}         {}  store the micro epoch time in {time}
[22;37m         #format {test} {%X}      {dec}  convert dec to hexadecimal in {test}

[22;37m         #format {test} {%%}             a literal % character

[1;37mComment[22;37m: See #help TIME for help on the %t argument.
[0m
[1;37mRelated[22;37m: cat, echo, function, local, math, replace, script, time and variable.[0m

[1;37mCommand[22;37m: #if [1;37m{[22;37mconditional[1;37m} {[22;37mcommands if true[1;37m} {[22;37mcommands if false[1;37m}

[22;37m         The #if command works similar to an if statement in other languages,
[22;37m         and is based on the way C handles its conditional statements.
[22;37m         When an #if command is encountered, the conditional statement is
[22;37m         evaluated, and if TRUE (any non-zero result) the commands are executed.

[22;37m         The conditional is evaluated exactly the same as in the #math command,
[22;37m         if the conditional evaluates as anything except 0 the commands are
[22;37m         executed. See the 'math' helpfile for more information.

[22;37m         To handle the case where an if statement is false it can be followed
[22;37m         by the #else command. Alternatively, the else can be provided as the
[22;37m         third argument.

[1;37mExample[22;37m: #action {%0 gives you %1 gold coins.} {#if {%1 > 5000} {thank %0}}
[22;37m         If someone gives you more than 5000 coins, thank them.

[1;37mExample[22;37m: #alias {k} {#if {"%0" == ""} {kill $target};#else {kill %0}}

[1;37mExample[22;37m: #if {"%0" == "{bli|bla}"} {#showme %0 is either bli or bla.}
[0m
[1;37mRelated[22;37m: case, default, else, elseif, math, switch and regexp.[0m

[1;37mCommand[22;37m: #list [1;37m{[22;37mvariable[1;37m} {[22;37moption[1;37m} {[22;37margument[1;37m}

[22;37m         #list {var} {add} <items>              Add <items> to the list
[22;37m         #list {var} {clear}                    Empty the given list
[22;37m         #list {var} {collapse} <separator>     Turn list into a variable
[22;37m         #list {var} {copy} <variable>          Copy variable to the list
[22;37m         #list {var} {create} <items>           Create a list using <items>
[22;37m         #list {var} {delete} <index> [amount]  Delete the item at <index>,
[22;37m                                                the [amount] is optional.
[22;37m         #list {var} {explode} <separator>      Turn variable into a list
[22;37m         #list {var} {indexate} [key]           Index a list table for sorting
[22;37m         #list {var} {insert} <index> <item>    Insert <item> at given index
[22;37m         #list {var} {filter} <keep> [remove]   Filter with keep / remove regex
[22;37m         #list {var} {find} <regex> <variable>  Return the found index
[22;37m         #list {var} {get} <index> <variable>   Copy an item to {variable}
[22;37m         #list {var} {numerate}                 Renumber a table or list
[22;37m         #list {var} {order} [items]            Sort list alphanumerically
[22;37m         #list {var} {refine} <keep> [remove]   Filter with keep / remove math
[22;37m                                                with &0 holding the value
[22;37m         #list {var} {reverse}                  Reverse the list
[22;37m         #list {var} {shuffle}                  Shuffle the list
[22;37m         #list {var} {set} <index> <item>       Change the item at {index}
[22;37m         #list {var} {simplify} [items]         Turn list into a simple list
[22;37m         #list {var} {size} <variable>          Copy list size to {variable}
[22;37m         #list {var} {sort} [items]             Sort list alphabetically, if
[22;37m                                                an item is given it's added.
[22;37m         #list {var} {swap} <index> <index>     Swap two items
[22;37m         #list {var} {tokenize} <string>        Create a character list

[22;37m         The index should be between +1 and the list's size. You can also give
[22;37m         a negative value, in which case -1 equals the last item in the list,
[22;37m         -2 the second last, etc.

[22;37m         When inserting an item a positive index will prepend the item at the
[22;37m         given index, while a negative index will append the item.

[22;37m         The add and create options allow using multiple items, as well
[22;37m         as semicolon separated items.

[22;37m         The get option will return the item or the indexation. Use
[22;37m         $var[<index>] to retrieve the nested data of a list table.

[22;37m         The order, sort and simplify options will perform the operation on
[22;37m         the given list. Optional items can be provided which are added to
[22;37m         the new or existing list before the operation is executed. Sorting
[22;37m         and ordering are stable.

[22;37m         The indexate option prepares a table or list table for order, sort,
[22;37m         filter, refine, and find operations for the given key. It is similar
[22;37m         to the SELECT option in SQL. All entries must contain the given key.

[22;37m         A size of 0 is returned for an empty or non-existent list. You can
[22;37m         directly access the size of a list using &var[].

[22;37m         You can directly access elements in a list variable using $var[+1],
[22;37m         $var[+2], $var[-1], etc.
[0m
[1;37mRelated[22;37m: break, continue, foreach, loop, parse, repeat, return and while.[0m

[1;37mCommand[22;37m: #math [1;37m{[22;37mvariable[1;37m} {[22;37mexpression[1;37m}

[22;37m         Performs math operations and stores the result in a variable.  The math
[22;37m         follows a C-like precedence, as follows, with the top of the list
[22;37m         having the highest priority.

[22;37m         Operators       Priority     Function
[22;37m         ------------------------------------------------
[22;37m         !               0            logical not
[22;37m         ~               0            bitwise not
[22;37m         d               1            integer random dice
[22;37m         *               2            integer multiply
[22;37m         **              2            integer power
[22;37m         /               2            integer divide
[22;37m         //              2            integer sqrt // 2 or cbrt // 3
[22;37m         %               2            integer modulo
[22;37m         +               3            integer addition
[22;37m         -               3            integer subtraction
[22;37m         <<              4            bitwise shift
[22;37m         >>              4            bitwise shift
[22;37m         ..              4            integer range
[22;37m         >               5            logical greater than
[22;37m         >=              5            logical greater than or equal
[22;37m         <               5            logical less than
[22;37m         <=              5            logical less than or equal
[22;37m         ==              6            logical equal (can use regex)
[22;37m         ===             6            logical equal (never regex)
[22;37m         !=              6            logical not equal (can use regex)
[22;37m         !==             6            logical not equal (never regex)
[22;37m          &              7            bitwise and
[22;37m          ^              8            bitwise xor
[22;37m          |              9            bitwise or
[22;37m         &&             10            logical and
[22;37m         ^^             11            logical xor
[22;37m         ||             12            logical or
[22;37m         ?              13            logical ternary if (unfinished code)
[22;37m         :              14            logical ternary else 

[22;37m         True is any non-zero number, and False is zero.  Parentheses () have
[22;37m         highest precedence, so inside the () is always evaluated first.

[22;37m         Strings must be enclosed in " " or { } and in the case of an == or
[22;37m         != operation a regex is performed with the regular expression in the
[22;37m         right-hand string. In the case of a <= or >= operation the alphabetic
[22;37m         order is compared.

[22;37m         The #if and #switch commands use #math. Several commands accepting
[22;37m         numeric input allow math operations as well, such as #delay.

[22;37m         Floating point precision is added by using the decimal . operator or
[22;37m         using #format with the %f flag character.

[1;37mExample[22;37m: #math {heals} {$mana / 40}
[22;37m         Assuming there is a variable $mana, divides its value by 40 and stores
[22;37m         the result in $heals.

[1;37mExample[22;37m: #action {^You receive %0 experience} {updatexp %0}
[22;37m         #alias updatexp {#math {xpneed} {$xpneed - %0}
[22;37m         Let's say you have a variable which stores xp needed for your next
[22;37m         level.  The above will modify that variable after every kill, showing
[22;37m         the amount still needed.

[1;37mExample[22;37m: #action {%0 tells %1}
[22;37m           {#if {{%0} == {Bubba} && $afk} {reply I'm away, my friend.}}
[22;37m         When you are away from keyboard, it will only reply to your friend.
[0m
[1;37mRelated[22;37m: cat, format, function, local, mathematics, replace, script and variable.[0m

[1;37mCommand[22;37m: #parse [1;37m{[22;37mstring[1;37m} {[22;37mvariable[1;37m} {[22;37mcommands[1;37m}

[22;37m         Like the loop statement, parse will loop from start to finish through
[22;37m         the given string.  The value of the current character is stored in the
[22;37m         provided variable.

[1;37mExample[22;37m: #parse {hello world} {char} {#show $char}
[0m
[1;37mRelated[22;37m: break, continue, foreach, list, loop, repeat, return and while.[0m

[1;37mCommand[22;37m: #[1;37m[[0;37mnumber[1;37m] {[22;37mcommands[1;37m}

[22;37m        Sometimes you want to repeat the same command multiple times. This is
[22;37m        the easiest way to accomplish that.

[1;37mExample[22;37m: #10 {buy bread}
[0m
[1;37mRelated[22;37m: mathematics and statements.[0m

[1;37mCommand[22;37m: #send [1;37m{[22;37mtext[1;37m}

[22;37m         Sends the text directly to the server, useful if you want to start
[22;37m         with an escape code.
[0m
[1;37mRelated[22;37m: textin[0m


[22;37m         TinTin++ knows the following statements.

[22;37m         #break
[22;37m         #case {value} {true}
[22;37m         #continue
[22;37m         #default {commands}
[22;37m         #else {commands}
[22;37m         #elseif {expression} {true}
[22;37m         #foreach {list} {variable} {commands}
[22;37m         #if {expression} {true}
[22;37m         #loop {min} {max} {variable} {commands}
[22;37m         #parse {string} {variable} {commands}
[22;37m         #return {value}
[22;37m         #switch {expression} {commands}
[22;37m         #while {expression} {commands}
[0m
[1;37mRelated[22;37m: mathematics, pcre and repeat.[0m

[1;37mCommand[22;37m: #ticker [1;37m{[22;37mname[1;37m} {[22;37mcommands[1;37m} {[22;37minterval in seconds[1;37m}

[22;37m         Executes given command every # of seconds. Floating point precision
[22;37m         for the interval is allowed. A ticker cannot fire more often than
[22;37m         10 times per second.

[1;37mComment[22;37m: Tickers don't work in the startup session.

[1;37mComment[22;37m: You can remove a ticker with the #unticker command.
[0m
[1;37mRelated[22;37m: delay and event.[0m

[1;37mCommand[22;37m: #all [1;37m{[22;37mstring[1;37m}

[22;37m         If you have multiple sessions in one terminal you can use #all to
[22;37m         execute the command with all sessions, excluding the startup session.

[1;37mExample[22;37m: #all quit

[22;37m         Sends 'quit' to all sessions.
[0m
[1;37mRelated[22;37m: port, run, session, sessionname, snoop, ssl and zap.[0m

[1;37mCommand[22;37m: #chat [1;37m{[22;37moption[1;37m} {[22;37margument[1;37m}

[22;37m         The #chat command is used to create peer to peer connections to other
[22;37m         clients, typically for the purpose of chatting and sending files.
[22;37m         This is a decentralized chat system, meaning you have to exchange ip
[22;37m         addresses and port numbers with other users in order to connect to
[22;37m         them.

[22;37m         [1;37m#chat {init} {port}
[22;37m           #chat initialize launches your chat server. The port number is
[22;37m           optional, and by default 4050 is used as your port. After using
[22;37m           this command other people can connect to your chat server using
[22;37m           your ip address and port number, and in turn you can connect to
[22;37m           other people.
[22;37m         [1;37m#chat {name} {name}
[22;37m           By default your name is set to TinTin, but most servers will
[22;37m           reject you if there is already someone with the name TinTin
[22;37m           connected, so one of the first things you'd want to do is
[22;37m           change your chat name. Your name can include color codes. Some
[22;37m           names aren't accepted by tt++ chat servers, like the name 'all'
[22;37m           and names longer than 20 characters.
[22;37m         [1;37m#chat {message} {buddy|all} {text}
[22;37m           This is the main command used for communication. If you use
[22;37m           #chat message all, the message is marked as public and sent to
[22;37m           everyone you are connected to.
[22;37m         [1;37m#chat {accept} {buddy} {boost}
[22;37m           Accept a file transfer from a buddy. The boost is optional and
[22;37m           must be a value between 1 and 1000.
[22;37m         [1;37m#chat {call}       {address} {port}
[22;37m           #chat call is used to connect to another chat server. If you
[22;37m           omit the port argument the default port (4050) is used.
[22;37m         #chat {cancel}     {buddy}            Cancel a file transfer
[22;37m         #chat {color}      {color names}      Set the default color
[22;37m         #chat {decline}    {buddy}            Decline a file transfer
[22;37m         #chat {dnd}                           Decline new connections
[22;37m         #chat {download}   {directory}        Set your download directory
[22;37m         #chat {emote}      {buddy|all} {text} Send an emote message
[22;37m         #chat {forward}    {buddy}            Forward all chat messages
[22;37m         #chat {forwardall} {buddy}            Forward all session output
[22;37m         #chat {filestat}   {buddy}            Show file transfer data
[22;37m         #chat {group}      {buddy} {name}     Assign a chat group
[22;37m         #chat {ignore}     {buddy}            Ignores someone
[22;37m         #chat {info}                          Displays your info
[22;37m         #chat {ip}         {address}          Changes your IP address
[22;37m         #chat {paste}      {buddy|all} {text} Pastes a block of text
[22;37m         #chat {peek}       {buddy}            Show one's public connections
[22;37m         #chat {ping}       {buddy}            Display response time
[22;37m         #chat {private}    {buddy|all}        Make a connection private
[22;37m         #chat {public}     {buddy|all}        Make a connection public
[22;37m         #chat {reply}      {text}             Reply to last private message
[22;37m         #chat {request}    {buddy}            Request one's public connections
[22;37m         #chat {send}       {buddy|all} {text} Sends a raw data string
[22;37m         #chat {sendfile}   {buddy} {filename} Start a file transfer
[22;37m         #chat {serve}      {buddy}            Forward all public chat messages
[22;37m         #chat {uninitialize}                  Uninitialize the chat port.
[22;37m         [1;37m#chat {who}
[22;37m           #chat who shows all people you are connected to. The first
[22;37m           column shows a reference number for the connection, which can be
[22;37m           used instead of the connection's name when sending someone a message
[22;37m           The second column shows the connection's name. The third column
[22;37m           shows flags set for the connection, (P)rivate, (I)gnore, (S)erve,
[22;37m           (F)orward to user, and (f)orward from user. The next columns show
[22;37m           ip, port, and client name.
[22;37m         [1;37m#chat {zap}        {buddy}            Close a connection
[0m
[1;37mRelated[22;37m: port[0m

[1;37mCommand[22;37m: #cursor [1;37m{[22;37moption[1;37m} {[22;37margument[1;37m}

[22;37m         Typing #cursor without an option will show all available cursor
[22;37m         options, their default binding, and an explanation of their function.

[22;37m         The cursor command's primarly goal is adding customizable input editing
[22;37m         with macros. Subsequently many cursor commands only work properly when
[22;37m         used within a macro or event.

[22;37m         [1;37m#cursor flag

[22;37m         EOL         end of line character(s)
[22;37m         ECHO        local echo
[22;37m         OVERTYPE    overtype mode

[22;37m         [1;37m#cursor macro

[22;37m         PRESERVE    do not erase the macro from the macro input buffer
[22;37m         RESET       erase the macro input buffer

[22;37m         [1;37m#cursor tab

[22;37m         CASELESS    makes tab completion caseless
[22;37m         COMPLETE    makes tab completion work while editing

[22;37m         DICTIONARY  performs tab completion on the dictionary
[22;37m         LIST        performs tab completion on the tab completion list
[22;37m         SCROLLBACK  performs tab completion on the scrollback buffer

[22;37m         BACKWARD    specifies tab completion to go backward
[22;37m         FORWARD     specifies tab completion to go forward

[22;37m         Multiple options can/must be specified at once.
[0m
[1;37mRelated[22;37m: alias, history, keypad, macro, speedwalk and tab.[0m


[22;36m┌─────────────────────────┐┌────────────────────────────────────────────┐
[22;36m│[1;37malt b                    [22;36m││[1;37mcursor backward word                        [22;36m│
[22;36m├─────────────────────────┤├────────────────────────────────────────────┤
[22;36m│[1;37malt f                    [22;36m││[1;37mcursor forward word                         [22;36m│
[22;36m└─────────────────────────┘└────────────────────────────────────────────┘
[22;36m┌─────────────────────────┐┌────────────────────────────────────────────┐
[22;36m│[1;37mctrl a                   [22;36m││[1;37mcursor home                                 [22;36m│
[22;36m├─────────────────────────┤├────────────────────────────────────────────┤
[22;36m│[1;37mctrl b                   [22;36m││[1;37mcursor backward                             [22;36m│
[22;36m├─────────────────────────┤├────────────────────────────────────────────┤
[22;36m│[1;37mctrl c                   [22;36m││[1;37mclear line                                  [22;36m│
[22;36m├─────────────────────────┤├────────────────────────────────────────────┤
[22;36m│[1;37mctrl d                   [22;36m││[1;37mdelete or exit                              [22;36m│
[22;36m├─────────────────────────┤├────────────────────────────────────────────┤
[22;36m│[1;37mctrl e                   [22;36m││[1;37mcursor end                                  [22;36m│
[22;36m├─────────────────────────┤├────────────────────────────────────────────┤
[22;36m│[1;37mctrl f                   [22;36m││[1;37mcursor forward                              [22;36m│
[22;36m├─────────────────────────┤├────────────────────────────────────────────┤
[22;36m│[1;37mctrl g                   [22;36m││[1;37m                                            [22;36m│
[22;36m├─────────────────────────┤├────────────────────────────────────────────┤
[22;36m│[1;37mctrl h                   [22;36m││[1;37mbackspace                                   [22;36m│
[22;36m├─────────────────────────┤├────────────────────────────────────────────┤
[22;36m│[1;37mctrl i                   [22;36m││[1;37mtab                                         [22;36m│
[22;36m├─────────────────────────┤├────────────────────────────────────────────┤
[22;36m│[1;37mctrl j                   [22;36m││[1;37menter                                       [22;36m│
[22;36m├─────────────────────────┤├────────────────────────────────────────────┤
[22;36m│[1;37mctrl k                   [22;36m││[1;37mclear line right                            [22;36m│
[22;36m├─────────────────────────┤├────────────────────────────────────────────┤
[22;36m│[1;37mctrl l                   [22;36m││[1;37mredraw input                                [22;36m│
[22;36m├─────────────────────────┤├────────────────────────────────────────────┤
[22;36m│[1;37mctrl m                   [22;36m││[1;37menter                                       [22;36m│
[22;36m├─────────────────────────┤├────────────────────────────────────────────┤
[22;36m│[1;37mctrl n                   [22;36m││[1;37minput history next                          [22;36m│
[22;36m├─────────────────────────┤├────────────────────────────────────────────┤
[22;36m│[1;37mctrl o                   [22;36m││[1;37m                                            [22;36m│
[22;36m├─────────────────────────┤├────────────────────────────────────────────┤
[22;36m│[1;37mctrl p                   [22;36m││[1;37minput history prev                          [22;36m│
[22;36m├─────────────────────────┤├────────────────────────────────────────────┤
[22;36m│[1;37mctrl q                   [22;36m││[1;37m                                            [22;36m│
[22;36m├─────────────────────────┤├────────────────────────────────────────────┤
[22;36m│[1;37mctrl r                   [22;36m││[1;37minput history search                        [22;36m│
[22;36m├─────────────────────────┤├────────────────────────────────────────────┤
[22;36m│[1;37mctrl s                   [22;36m││[1;37m                                            [22;36m│
[22;36m├─────────────────────────┤├────────────────────────────────────────────┤
[22;36m│[1;37mctrl t                   [22;36m││[1;37mscroll buffer lock                          [22;36m│
[22;36m├─────────────────────────┤├────────────────────────────────────────────┤
[22;36m│[1;37mctrl u                   [22;36m││[1;37mclear line left                             [22;36m│
[22;36m├─────────────────────────┤├────────────────────────────────────────────┤
[22;36m│[1;37mctrl v                   [22;36m││[1;37mconvert meta characters                     [22;36m│
[22;36m├─────────────────────────┤├────────────────────────────────────────────┤
[22;36m│[1;37mctrl w                   [22;36m││[1;37mdelete word left                            [22;36m│
[22;36m├─────────────────────────┤├────────────────────────────────────────────┤
[22;36m│[1;37mctrl x                   [22;36m││[1;37m                                            [22;36m│
[22;36m├─────────────────────────┤├────────────────────────────────────────────┤
[22;36m│[1;37mctrl y                   [22;36m││[1;37mpaste                                       [22;36m│
[22;36m├─────────────────────────┤├────────────────────────────────────────────┤
[22;36m│[1;37mctrl z                   [22;36m││[1;37msuspend                                     [22;36m│
[22;36m└─────────────────────────┘└────────────────────────────────────────────┘
[22;36m┌─────────────────────────┐┌────────────────────────────────────────────┐
[22;36m│[1;37marrow left               [22;36m││[1;37mcursor left                                 [22;36m│
[22;36m├─────────────────────────┤├────────────────────────────────────────────┤
[22;36m│[1;37marrow right              [22;36m││[1;37mcursor right                                [22;36m│
[22;36m├─────────────────────────┤├────────────────────────────────────────────┤
[22;36m│[1;37marrow up                 [22;36m││[1;37mprevious input line                         [22;36m│
[22;36m├─────────────────────────┤├────────────────────────────────────────────┤
[22;36m│[1;37marrow down               [22;36m││[1;37mnext input line                             [22;36m│
[22;36m└─────────────────────────┘└────────────────────────────────────────────┘
[22;36m┌─────────────────────────┐┌────────────────────────────────────────────┐
[22;36m│[1;37mctrl arrow left          [22;36m││[1;37mcursor left word                            [22;36m│
[22;36m├─────────────────────────┤├────────────────────────────────────────────┤
[22;36m│[1;37mctrl arrow right         [22;36m││[1;37mcursor right word                           [22;36m│
[22;36m└─────────────────────────┘└────────────────────────────────────────────┘
[22;36m┌─────────────────────────┐┌────────────────────────────────────────────┐
[22;36m│[1;37mbackspace                [22;36m││[1;37mbackspace                                   [22;36m│
[22;36m├─────────────────────────┤├────────────────────────────────────────────┤
[22;36m│[1;37malt backspace            [22;36m││[1;37mclear line left                             [22;36m│
[22;36m├─────────────────────────┤├────────────────────────────────────────────┤
[22;36m│[1;37mctrl backspace           [22;36m││[1;37mclear line                                  [22;36m│
[22;36m└─────────────────────────┘└────────────────────────────────────────────┘
[22;36m┌─────────────────────────┐┌────────────────────────────────────────────┐
[22;36m│[1;37mdelete                   [22;36m││[1;37mdelete                                      [22;36m│
[22;36m├─────────────────────────┤├────────────────────────────────────────────┤
[22;36m│[1;37mctrl delete              [22;36m││[1;37mdelete word right                           [22;36m│
[22;36m└─────────────────────────┘└────────────────────────────────────────────┘
[22;36m┌─────────────────────────┐┌────────────────────────────────────────────┐
[22;36m│[1;37mend                      [22;36m││[1;37mcursor end                                  [22;36m│
[22;36m├─────────────────────────┤├────────────────────────────────────────────┤
[22;36m│[1;37mctrl end                 [22;36m││[1;37mscroll buffer end                           [22;36m│
[22;36m└─────────────────────────┘└────────────────────────────────────────────┘
[22;36m┌─────────────────────────┐┌────────────────────────────────────────────┐
[22;36m│[1;37menter                    [22;36m││[1;37menter                                       [22;36m│
[22;36m├─────────────────────────┤├────────────────────────────────────────────┤
[22;36m│[1;37mshift-enter              [22;36m││[1;37msoft enter                                  [22;36m│
[22;36m└─────────────────────────┘└────────────────────────────────────────────┘
[22;36m┌─────────────────────────┐┌────────────────────────────────────────────┐
[22;36m│[1;37mhome                     [22;36m││[1;37mcursor home                                 [22;36m│
[22;36m├─────────────────────────┤├────────────────────────────────────────────┤
[22;36m│[1;37mctrl home                [22;36m││[1;37mscroll buffer home                          [22;36m│
[22;36m└─────────────────────────┘└────────────────────────────────────────────┘
[22;36m┌─────────────────────────┐┌────────────────────────────────────────────┐
[22;36m│[1;37mpage up                  [22;36m││[1;37mscroll buffer up                            [22;36m│
[22;36m├─────────────────────────┤├────────────────────────────────────────────┤
[22;36m│[1;37mpage down                [22;36m││[1;37mscroll buffer down                          [22;36m│
[22;36m└─────────────────────────┘└────────────────────────────────────────────┘
[22;36m┌─────────────────────────┐┌────────────────────────────────────────────┐
[22;36m│[1;37mtab                      [22;36m││[1;37mcomplete word forward                       [22;36m│
[22;36m├─────────────────────────┤├────────────────────────────────────────────┤
[22;36m│[1;37mshift-tab                [22;36m││[1;37mcomplete word backward                      [22;36m│
[22;36m└─────────────────────────┘└────────────────────────────────────────────┘
[0m
[1;37mRelated[22;37m: cursor, edit and macro.[0m

[1;37mCommand[22;37m: #function [1;37m{[22;37mname[1;37m} {[22;37moperation[1;37m}

[22;37m         Functions allow you to execute a script within a line of text, and
[22;37m         replace the function call with the line of text generated by the
[22;37m         function.

[22;37m         Be aware that each function should use the #return command at the
[22;37m         end of the function with the result, or set the {result} variable.

[22;37m         To use a function use the @ character before the function name.
[22;37m         The function arguments should be placed between braces behind the
[22;37m         function name with argument separated by semicolons.

[22;37m         Functions can be escaped by adding additional @ signs.

[1;37mExample[22;37m: #function test #return 42;#showme @@test{}

[22;37m         The function itself can use the provided arguments which are stored
[22;37m         in %1 to %99, with %0 holding all arguments.

[1;37mExample[22;37m: #function {rnd} {#math {result} {1 d (%2 - %1 + 1) + %1 - 1}}
[22;37m         #show A random number between 100 and 200: @rnd{100;200}

[1;37mExample[22;37m: #function gettime {#format result %t %H:%M}
[22;37m         #show The current time is @gettime{}

[1;37mComment[22;37m: You can remove a function with the #unfunction command.
[0m
[1;37mRelated[22;37m: format, local, math, replace, script and variable.[0m

[1;37mCommand[22;37m: #ignore [1;37m{[22;37mlistname[1;37m} {[22;37mon[1;37m|[22;37moff[1;37m}

[22;37m         Toggles a list on or off. With no arguments it shows your current
[22;37m         settings, as well as the list names that you can ignore.

[22;37m         If you for example use #IGNORE ACTIONS ON actions will no longer
[22;37m         trigger. Not every list can be ignored.
[0m
[1;37mRelated[22;37m: class, debug, info, kill and message.[0m

[22;37m         There are several different types of lists in tintin which behave in a
[22;37m         fairly universal manner. To properly explain lists it's easiest to
[22;37m         explain the most basic variable type first before discussing more
[22;37m         complex types.

       - Basic variable: The standard key = value variable.

       - Simple list: A string that contains semicolon delimited fields.
[22;37m         {a;b;c}. Can be saved as a variable.

       - Brace list: A string in which fields are delimited with braces.
[22;37m         {a}{b}{c}. Brace lists cannot be stored as a variable because tables
[22;37m         use braces as well, they must be stored as a simple list instead.

       - Table: Think of this as variables nested within another variable. Or
[22;37m          as variables contained within another variable.

       - List: A table that uses integers for its indexes. Also known as an
[22;37m         array. The #list command is a utility command for using tables as
[22;37m         arrays.

[1;32m         Simple Variables

[1;37mExample[22;37m:
[22;37m         #variable {simple} {Hello World!}
[22;37m         #show $simple

[22;37m         To see if the 'simple' variable exists you can use &{simple} which
[22;37m         will display 0 if the variable does not exist, or the variable's index
[22;37m         if it exists.

[22;37m         If you have multiple variables they are sorted alphabetically and
[22;37m         numerically. While it's not all that relevant for simple variables,
[22;37m         the first variable has index 1, the second variable index 2, and so
[22;37m         on.

[22;37m         Variable names need to start with a letter and only exist of letters,
[22;37m         numbers, and underscores. If you need to use a non standard variable
[22;37m         name this is possible using braces.

[1;37mExample[22;37m: #variable {:)} {Happy Happy!};#show ${:)}

[22;37m         Variables can be accessed using their index. While primarily useful
[22;37m         for tables it is possible to do this for simple variables. Use +1 for
[22;37m         the first variable, +2 for the second variable, etc. Use -1 for the
[22;37m         last variable, -2 for the second last variable, etc.

[1;37mExample[22;37m: #show The first variable is: *{+1} with value: ${+1}

[1;32m         Removing Variables

[22;37m         To remove a variable, use #unvariable or #unvar (every command can be
[22;37m         abbreviated). It's possible to remove multiple variables at once
[22;37m         using #unvar {var 1} {var 2} {etc}

[22;37m         Variables are unique to each session, so if you have multiple
[22;37m         sessions, removing a variable from one session won't remove it from
[22;37m         other sessions.

[22;37m         If you remove a table variable, all variables contained within that
[22;37m         table variable are removed as well.

[1;32m         Simple Lists

[22;37m         A simple list is a string that contains semicolon delimited fields.
[22;37m         Commands can be entered as simple lists, for example:
[22;37m         #show {a};#show {b} will execute a single line as two commands.

[22;37m         Several commands take a simple list as their input, these are:
[22;37m         #foreach, #line substitute, #path load, #list create, and #highlight.

[1;32m         Brace Lists

[22;37m         A brace list is a string in which fields are delimited with braces.
[22;37m         Most commands take a brace list for their arguments, for example:
[22;37m         #session {x} {mud.com} {1234} {mud.tin}. The session command takes
[22;37m         4 arguments, the 4th argument (command file) is optional.

[22;37m         Commands that take a simple list as their input will also accept a
[22;37m         brace list, keep in mind you'll have to embed the brace list in an
[22;37m         extra set of braces, for example: #path load {{n}{s}{w}{w}}, which is
[22;37m         identical to: #path load {n;s;w;w}.

[22;37m         Brace lists cannot be stored as variables because TinTin++ will
[22;37m         confuse them with tables. You can convert a brace list to a table
[22;37m         variable using: #list {bracelist} {create} {{a}{b}{c}} this will look
[22;37m         internally as: {{1}{a}{2}{b}{3}{c}}. You can then convert this table
[22;37m         back to a simple list using: #list {bracelist} {simplify} which will
[22;37m         change it to {a;b;c}.

[22;37m         Braces cannot easily be escaped in TinTin++. Using \{ or \} will not
[22;37m         work. The reason for this is due to several factors, but primarily
[22;37m         backward compatibility. To escape braces you must define them using
[22;37m         hexadecimal notation using \x7B and \x7D. See #help escape for a list
[22;37m         of escape options, and the help file will also remind you of how to
[22;37m         escape braces.

[1;32m         Tables

[22;37m         Tables are key/value pairs stored within a variable. Tables are also
[22;37m         known as associative arrays, dictionaries, maps, nested variables,
[22;37m         structures, and probably a couple of other names. There are several
[22;37m         ways to create and access tables.

[1;37mExample[22;37m: #variable {friendlist} {{bob}{bob@mail.com} {bubba}{sunset@gmail.com}}

[22;37m         This will create a friendlist with two entries, the key is the name of
[22;37m         the friend, the value is the email address of the friend. You can see
[22;37m         the email address of bob using: #show {$friendlist[bob]}. You can
[22;37m         also define this table as following:

[1;37mExample[22;37m:
[22;37m         #variable {friendlist[bob]} {bob@mail.com}
[22;37m         #variable {friendlist[bubba]} {sunset@gmail.com}

[22;37m         This would create the exact same table as the single line declaration
[22;37m         used previously. To see the first key in the table use:
[22;37m         *friendlist[+1], to see the first value in the table use:
[22;37m         $friendlist[+1]. To see the size of the table use &friendlist[]. To
[22;37m         print a bracelist of all friends use *friendlist[], to print a
[22;37m         bracelist of all friends whose name starts with the letter 'a' you
[22;37m         would use: *friendlist[a%*]. Similarly to see the number of friends
[22;37m         you have whose name ends with the letter 'b' you would use:
[22;37m         &friendlist[%*b].

[22;37m         See #help regexp for a brief overview of regular expression options.
[22;37m         While TinTin++ supports PCRE (perl-compatible regular expressions), it
[22;37m         embeds them within its own regular expression syntax that is simpler
[22;37m         and less invasive, while still allowing the full power of PCRE for
[22;37m         those who need it.

[1;37mExample[22;37m: #unvariable {friendlist[bubba]}

[22;37m         This would remove {bubba} from the friendlist. To remove the entire
[22;37m         friendlist you would use: #unvariable {friendlist}.

[1;37mExample[22;37m: #variable {friendlist} {{bob} {{email}{bob@ma.il} {phone}{123456789}}}

[22;37m         There is no limit to the number of nests, simply add more braces. To
[22;37m         see Bob's email in this example you would use:
[22;37m         #show {$friendlist[bob][email]}.

[22;37m         To merge two tables the #cat command can be used.
[1;37mExample[22;37m:
[22;37m         #variable {bli} {{a}{1}{b}{2}}
[22;37m         #variable {blo} {{c}{3}{d}{4}}
[22;37m         #cat {blo} {$bli}

[1;32m         Lists

[22;37m         Tables are sorted alphabetically with the exception of numbers which
[22;37m         are sorted numerically. If you want to determine the sorting order
[22;37m         yourself you can use use the #list command which helps you to use
[22;37m         tables as arrays.

[1;37mExample[22;37m: #action {%1 chats %2} {#list chats add {%0}}

[22;37m         Each time a chat is received it's added to the end of the 'chats' list
[22;37m         variable. If you type #variable chats this might look like:

[22;37m         [1;33m#[1;36mVARIABLE [22;35m{[1;37mchats[22;35m}
[22;37m         [22;35m{
[22;37m                 [22;35m{[1;37m1[22;35m} {[1;37mBubba chats Hi[22;35m}
[22;37m                 [22;35m{[1;37m2[22;35m} {[1;37mBob chats Hi bub[22;35m}
[22;37m                 [22;35m{[1;37m3[22;35m} {[1;37mBubba chats Bye[22;35m}
[22;37m                 [22;35m{[1;37m4[22;35m} {[1;37mBob chats bub bye[22;35m}
[22;37m         [22;35m}

[1;32m         Parsing

[22;37m         There are various ways to parse lists and tables, using either #loop,
[22;37m         #foreach, #while, or #<number>.

[22;37m         #loop takes two numeric arguments, incrementing or decrementing the
[22;37m         first number until it matches the second number. The value of the loop
[22;37m         counter is stored in the provided variable.

[22;37m         #foreach takes either a simple list or a brace list as its first
[22;37m         argument. Foreach will go through each item in the list and store the
[22;37m         value in the provided variable.

[22;37m         #while will perform an if check on the first argument, if the result
[22;37m         is true it will execute the commands in the second argument. Then it
[22;37m         performs an if check on the first argument again. It will continue to
[22;37m         repeat until the if check returns 0 or the loop is interrupted with a
[22;37m         control flow command. It takes special care to avoid infinite loops.

[22;37m         #<number> will execute the provided argument 'number' times. For
[22;37m         example: #4 {#show beep! \a}

[22;37m         Here are some examples.

[1;37mExample[22;37m: #list friends create {bob;bubba;zorro}

[22;37m         Internally this looks like {{1}{bob}{2}{bubba}{3}{zorro}} and the
[22;37m         list can be parsed in various ways.

[1;37mExample[22;37m: #foreach {$friends[%*]} {name} {#show $name}

[1;37mExample[22;37m: #foreach {*friends[%*]} {i} {#show $friends[$i]}

[1;37mExample[22;37m: #loop {1} {&friends[]} {i} {#show $friends[+$i]}

[1;37mExample[22;37m: #math i 1;#while {&friends[+$i]} {#show $friends[+$i];
[22;37m         #math i $i + 1}

[1;37mExample[22;37m: #math i 1;#&friends[] {#show $friends[+$i];#math i $i + 1}

[22;37m         Each of the five examples above performs the same task; printing the
[22;37m         three names in the friends list.

[22;37m         If you want to get a better look at what goes on behind the scenes
[22;37m         while executing scripts you can use '#debug all on'. To stop seeing
[22;37m         debug information use '#debug all off'.

[1;32m         List Tables

[22;37m         List tables are also known as databases and the #list command has
[22;37m         several options to manipulate them.

[22;37m         For these options to work properly all tables need to have identical
[22;37m         keys. Here is an example list table.

[22;37m         #var {friendlist}
[22;37m         {
[22;37m             {1}{{name}{bob} {age}{54}}
[22;37m             {2}{{name}{bubba} {age}{21}}
[22;37m             {3}{{name}{pamela} {age}{36}}
[22;37m         }

[22;37m         To sort the list table by age you would use:

[22;37m         #list friendlist indexate age
[22;37m         #list friendlist order

[22;37m         To remove everyone whose name starts with a 'b' you would use:

[22;37m         #list friendlist indexate name
[22;37m         #list friendlist filter {} {b%*}

[22;37m         The filter option only supports regular expressions. To filter
[22;37m         using mathematics you would loop through the list backwards:

[22;37m         #loop &friendlist[] 1 index
[22;37m         {
[22;37m             #if {$friendlist[+$index][age] < 30}
[22;37m             {
[22;37m                 #list friendlist delete $index
[22;37m             }
[22;37m         }

[22;37m         Alternatively you can use the refine option.

[22;37m         #list friendlist indexate age
[22;37m         #list friendlist refine {&0 >= 30}

[22;37m         To add an item to a list table there are two options:

[22;37m         #list friendlist add {{{name}{hobo} {age}{42}}}
[22;37m         #list friendlist insert -1 {{name}{hobo} {age}{42}}

[1;32m         Optimization

[22;37m         TinTin++ tables are exceptionally fast while they remain under 100
[22;37m         items. Once a table grows beyond 10000 items there can be performance
[22;37m         issues when inserting and removing items in the beginning or middle of
[22;37m         the table.

[22;37m         The plan is to eventually implement an indexable and flexible data
[22;37m         structure for large tables.

[22;37m         If you load a large table from file it's important to make sure it's
[22;37m         sorted, when using #write to save a table it's automatically sorted.

[22;37m         If you notice performance issues on large tables it's relatively easy
[22;37m         to create a hash table.

[1;37mExample[22;37m:

[22;37m         #alias {sethash}
[22;37m         {
[22;37m             #format hash %H %1;
[22;37m             #math hash1 $hash % 100;
[22;37m             #math hash2 $hash / 100 % 100;
[22;37m             #var hashtable[$hash1][$hash2][%1] %2
[22;37m         }

[22;37m         #function {gethash}
[22;37m         {
[22;37m             #format hash %H %1;
[22;37m             #math hash1 $hash % 100;
[22;37m             #math hash2 $hash / 100 % 100;
[22;37m             #return $hashtable[$hash1][$hash2][%1]
[22;37m         }

[22;37m         #alias {test}
[22;37m         {
[22;37m             sethash bli hey;
[22;37m             sethash bla hi;
[22;37m             sethash blo hello;
[22;37m             #show The value of bla is: @gethash{bla}
[22;37m         }

[22;37m         The above script will rapidly store and retrieve over 1 million items.
[22;37m         Looping through a hash table is relatively easy as well.

[1;37mExample[22;37m:

[22;37m         #alias {showhash}
[22;37m         {
[22;37m             #foreach {*hashtable[%*]} {hash1}
[22;37m             {
[22;37m                 #foreach {*hashtable[$hash1][%*]} {hash2}
[22;37m                 {
[22;37m                     #echo {%-20s = %s}
[22;37m                                        {hashtable[$hash1][$hash2]}
[22;37m                                        {$hashtable[$hash1][$hash2]}
[22;37m                 }
[22;37m             }
        }
[0m
[1;37mRelated[22;37m: break, continue, foreach, loop, parse, repeat, return and while.[0m

[22;37m         [1;37mNumber operations

[22;37m         Operators       Priority     Function
[22;37m         ------------------------------------------------
[22;37m         !               0            logical not
[22;37m         ~               0            bitwise not
[22;37m         *               1            integer multiply
[22;37m         **              1            integer power
[22;37m         /               1            integer divide
[22;37m         //              1            integer sqrt // 2 or cbrt // 3
[22;37m         %               1            integer modulo
[22;37m         d               1            integer random dice roll
[22;37m         +               2            integer addition
[22;37m         -               2            integer subtraction
[22;37m         <<              3            bitwise shift
[22;37m         >>              3            bitwise shift
[22;37m         >               4            logical greater than
[22;37m         >=              4            logical greater than or equal
[22;37m         <               4            logical less than
[22;37m         <=              4            logical less than or equal
[22;37m         ==              5            logical equal
[22;37m         !=              5            logical not equal
[22;37m          &              6            bitwise and
[22;37m          ^              7            bitwise xor
[22;37m          |              8            bitwise or
[22;37m         &&              9            logical and
[22;37m         ^^             10            logical xor
[22;37m         ||             11            logical or

[22;37m         Operator priority can be ignored by using parentheses, for example
[22;37m         (1 + 1) * 2 equals 4, while 1 + 1 * 2 equals 3.

[22;37m         [1;37mString operations

[22;37m         Operators       Priority     Function
[22;37m         ------------------------------------------------
[22;37m         >               4            alphabetical greater than
[22;37m         >=              4            alphabetical greater than or equal
[22;37m         <               4            alphabetical less than
[22;37m         <=              4            alphabetical less than or equal
[22;37m         ==              5            alphabetical equal using regex
[22;37m         !=              5            alphabetical not equal using regex
[22;37m         ===             5            alphabetical equal
[22;37m         !==             5            alphabetical not equal

[22;37m         Strings must be encased in double quotes or braces. The > >= < <=
[22;37m         operators perform basic string comparisons. The == != operators perform
[22;37m         regular expressions, with the argument on the left being the string,
[22;37m         and the argument on the right being the regex. For example
[22;37m         {bla} == {%*a} would evaluate as 1.
[0m
[1;37mRelated[22;37m: math and regexp.[0m

[1;37mCommand[22;37m: #path [1;37m{[22;37moption[1;37m} {[22;37margument[1;37m}

[22;37m         create   Will clear the path and start path mapping.
[22;37m         delete   Will delete the last move of the path.
[22;37m         describe Describe the path and current position.
[22;37m         destroy  Will clear the path and stop path mapping.
[22;37m         get      Will get either the length or position.
[22;37m         goto     Go the the start, end, or given position index.
[22;37m         insert   Add the given argument to the path.
[22;37m         load     Load the given variable as the new path.
[22;37m         map      Display the map and the current position.
[22;37m         move     Move the position forward or backward. If a number is given
[22;37m                  the position is changed by the given number of steps.
[22;37m         run      Execute the current path, with an optional floating point
[22;37m                  delay in seconds as the second argument.
[22;37m         save     Save the path to a variable. You must specify whether you
[22;37m                  want to save the path 'forward' or 'backward'.
[22;37m         start    Start path mapping.
[22;37m         stop     Stop path mapping, can also abort #path run.
[22;37m         swap     Switch the forward and backward path.
[22;37m         unzip    Load the given speedwalk as the new path.
[22;37m         walk     Take one step forward or backward.
[22;37m         zip      Turn the path into a speedwalk.

[1;37mExample[22;37m: #path ins {unlock n;open n} {unlock s;open s}
[0m
[1;37mRelated[22;37m: map, pathdir and speedwalk.[0m

[1;37mCommand[22;37m: #replace [1;37m{[22;37mvariable[1;37m} {[22;37moldtext[1;37m} {[22;37mnewtext[1;37m}

[22;37m         Searches the given variable, replacing each occurrence of 'oldtext'
[22;37m         with 'newtext'. The 'oldtext' argument is a regular expression.

[22;37m         Variables are stored in &1 to &99 with &0 holding the entire matched
[22;37m         substring.

[1;37mExample[22;37m: #function rnd #math result 1d9;#replace test {%.} {@rnd{}}
[0m
[1;37mRelated[22;37m: cat, format, function, local, math, script and variable.[0m

[1;37mCommand[22;37m: #session [1;37m{[22;37mname[1;37m} {[22;37mhost[1;37m} {[22;37mport[1;37m} {[22;37mfile[1;37m}

[22;37m         Starts a telnet session with the given name, host, port, and optional
[22;37m         file name. The name can be anything you want, except the name of an
[22;37m         already existing session, a number, or the keywords '+' and '-'.

[22;37m         If a file name is given the file is only read if the session
[22;37m         succesfully connects.

[22;37m         Without an argument #session shows the currently defined sessions.

[22;37m         If you have more than one session, you can use the following commands:

[22;37m         #session {-}        Switch to the previous session.
[22;37m         #session {+}        Switch to the next session.
[22;37m         #session {<number>} Switch to the given session. Session 0 is the
[22;37m                             startup session, +1 the first, +2 the second, and
[22;37m                             -1 is the last session. Sessions are (currently)
[22;37m                             sorted in order of creation.
[22;37m         #gts                Switch to the startup session. The name gts stands
[22;37m                             for global tintin session.
[22;37m         #ats                Switch to the active session. The name ats stands
[22;37m                             for active tintin session.
[22;37m                             not necessarily the calling session.
[22;37m         #{name}             Activates to the session with the given name.
[22;37m         #{name} {command}:  Executes a command with the given session without
[22;37m                             changing the active session.
[22;37m         @<name>{text}:      Parse text in the given session, substituting the
[22;37m                             variables and functions, and print the result in
[22;37m                             the current active session.

[22;37m         The startup session is named 'gts' and can be used for relog scripts.
[22;37m         Do keep in mind that tickers do not work in the startup session.

[1;37mExample[22;37m: #event {SESSION DISCONNECTED} {#gts #delay 10 #ses %0 tintin.net 4321}
[0m
[1;37mRelated[22;37m: all, port, run, sessionname, snoop, ssl and zap.[0m

[1;37mCommand[22;37m: #substitute [1;37m{[22;37mtext[1;37m} {[22;37mnew text[1;37m} {[22;37mpriority[1;37m}

[22;37m         Allows you to replace text from the server with the new text.

[22;37m         The %1-%99 variables can be used to capture text and use it as part of
[22;37m         the new output.

[22;37m         Color codes can be used to color the new text, to restore the color to
[22;37m         that of the original line the <900> color code can be used.

[22;37m         If only one argument is given, all active substitutions that match the
[22;37m         argument are displayed.  Wildcards can be used, see '#help regex' for
[22;37m         additional information on that subject.

[22;37m         If no argument is given, all subs are displayed.

[1;37mExample[22;37m: #sub {Zoe} {ZOE}
[22;37m         Any instance of Zoe will be replaced with ZOE.

[1;37mExample[22;37m: #sub {~\e[0;34m} {\e[1;34m}
[22;37m         Replace generic dark blue color codes with bright blue ones.

[1;37mExample[22;37m: #sub {%1massacres%2} {<018>%1<118>MASSACRES<018>%2}
[22;37m         Replace a line containing 'massacres' with 'MASSACRES' in red.

[1;37mComment[22;37m: See '#help action', for more information about triggers.

[1;37mComment[22;37m: See '#help colors', for more information.

[1;37mComment[22;37m: You can remove a substitution with the #unsubstitute command.
[0m
[1;37mRelated[22;37m: action, gag, highlight and prompt.[0m

[1;37mCommand[22;37m: #format [1;37m{[22;37mvariable[1;37m} {[22;37m%t[1;37m} {[22;37margument[1;37m}

[22;37m         The %t format specifier of the #format command allows printing dates
[22;37m         using the strftime() format specifiers. By default the time stamp used
[22;37m         is the current time, if you want to print a past or future date use:

[1;37mCommand[22;37m: #format [1;37m{[22;37mvariable[1;37m} {[22;37m%t[1;37m} {{[22;37margument[1;37m} {[22;37mepoch time[1;37m}}

[22;37m         The current epoch time value is obtained using #format {time} {%T}.

[22;37m         When using %t the argument should contain strftime format specifiers.
[22;37m         Below are some common specifiers, see man strftime for the full list.

[22;37m         %a  Abbreviated name of the day of the week (mon ... sun).
[22;37m         %A  Full name of the day of the week. (Monday ... Sunday)
[22;37m         %b  Abbreviated name of the month (Jan ... Dec)
[22;37m         %B  Full name of the month. (January ... December)
[22;37m         %C  2 digit numeric century. (19 ... 20)
[22;37m         %d  2 digit numeric day of the month (01 ... 31)
[22;37m         %H  2 digit numeric 24-hour clock hour. (00 ... 23)
[22;37m         %I  2 digit numeric 12-hour clock hour. (01 ... 12)
[22;37m         %j  3 digit numeric day of the year (001 ... 366)
[22;37m         %m  2 digit numeric month of the year (01 ... 12)
[22;37m         %M  2 digit numeric minute of the hour (00 ... 59)
[22;37m         %p  Abbreviated 12 hour clock period (AM ... PM)
[22;37m         %P  Abbreviated 12 hour clock period (am ... pm)
[22;37m         %S  2 digit numeric second of the minute (00 ...59
[22;37m         %u  1 digit numeric day of the week (1 ... 7)
[22;37m         %U  2 digit numeric Sunday week of the year (00 ... 53
[22;37m         %w  1 digit numeric day of the week (0 ... 6)
[22;37m         %W  2 digit numeric Monday week of the year (00 ... 53
[22;37m         %y  2 digit numeric year. (70 ... 38)
[22;37m         %Y  4 digit numeric year. (1970 ... 2038)
[22;37m         %z  5 digit timezone offset. (-1200 ... +1400)
[22;37m         %Z  Abbreviated name of the time zone. (CET, GMT, etc)
[0m
[1;37mRelated[22;37m: echo, event and format.[0m

[1;37mCommand[22;37m: #bell [1;37m{[22;37mflash[1;37m|[22;37mfocus[1;37m|[22;37mmargin[1;37m|[22;37mring[1;37m|[22;37mvolume[1;37m} {[22;37margument[1;37m}

[22;37m         The #bell command without an argument will ring the terminal bell.

[1;37mExample[22;37m: #action {Bubba tells you} {#bell}

[22;37m         If you aren't watching the screen this could be useful if you don't
[22;37m         want to miss out on a conversation with Bubba. Alternatively you can
[22;37m         use #system to play a sound file.

[22;37m         Some terminals will allow you to use VT100 Operating System Commands
[22;37m         to change the terminal's bell behavior which can be used to flash the
[22;37m         taskbar icon and or focus the window on receival of a bell.

[1;37mExample[22;37m: #action {Bubba tells you} {#screen save title;#screen set title Tell!;
[22;37m           #bell ring;#delay 10 #screen load title}

[22;37m         The above example will save your window title, change the title to
[22;37m         'Tell!', ring the bell, next reset the window title after 10 seconds.

[22;37m         It's possible to set the terminal to pop to the foreground upon
[22;37m         ringing of the alarm bell.

[1;37mExample[22;37m: #bell focus on;#bell ring;#bell focus off

[22;37m         It's possible to adjust the alarm bell volume on some terminals.

[1;37mExample[22;37m: #loop {1} {8} {cnt} {#line substitute variables
[22;37m           #delay {$cnt} {#show Volume $cnt: #bell volume $cnt;#bell}
[0m
[1;37mRelated[22;37m: screen[0m

[1;37mCommand[22;37m: #class [1;37m{[22;37mname[1;37m} {[22;37moption[1;37m} {[22;37marg[1;37m}

[22;37m         The class command is primarily used to assign groups of triggers and
[22;37m         variables a label so they can be easily removed.

[22;37m         [1;37m#class {<name>} {assign} {<argument>}
[22;37m           Will open the class, execute argument, and close afterwards.
[22;37m         [1;37m#class {<name>} {clear}
[22;37m           Will delete all triggers associated with the given class.
[22;37m         [1;37m#class {<name>} {close}
[22;37m           Close the given class, opening the last open class, if any.
[22;37m         [1;37m#class {<name>} {kill}
[22;37m           Will clear, close, and remove the class.
[22;37m         [1;37m#class {<name>} {list}
[22;37m           List all triggers associated with the given class.
[22;37m         [1;37m#class {<name>} {load}
[22;37m           Will load the saved copy of the class from memory.
[22;37m         [1;37m#class {<name>} {open}
[22;37m           Open a class, closing a previously opened class. All triggers
[22;37m           added afterwards are assigned to this class.
[22;37m         [1;37m#class {<name>} {read} {<filename>
[22;37m           Will open the class, read the file, and close afterwards.
[22;37m         [1;37m#class {<name>} {save}
[22;37m           Will save all triggers of the given class to memory.
[22;37m         [1;37m#class {<name>} {size} {<variable>}
[22;37m           Will store the size of the class in a variable.
[22;37m         [1;37m#class {<name>} {write} {<filename>}
[22;37m           Will write all triggers of the given class to file.

[22;37m         Keep in mind that you need to use #class save before using
[22;37m         #class clear and #class load

[1;37mExample[22;37m: #class rich kill;#class rich read poor.tin
[22;37m         Deletes all triggers of 'rich' class if any. Read 'poor.tin' file,
[22;37m         all triggers loaded will be assigned to the 'rich' class.
[0m
[1;37mRelated[22;37m: config, debug, ignore, info, kill, line and message.[0m

[1;37mCommand[22;37m: #daemon [1;37m{[22;37mattach[1;37m|[22;37mdetach[1;37m|[22;37mkill[1;37m|[22;37mlist[1;37m} [[22;37mname[1;37m]

[22;37m         #daemon provides functionality similar to that of the screen and tmux
[22;37m         utilities.

[22;37m         [1;37m#daemon attach [name]
[22;37m           The attach option will try to find a daemonized tintin instance and
[22;37m           take over control. The name argument is optional.

[22;37m         [1;37m#daemon detach [name]
[22;37m           The detach option will daemonize tintin, turning it into a background
[22;37m           process. The name argument is optional and is useful if you have
[22;37m           several daemonized tt++ instances running so you can keep them apart.

[22;37m         [1;37m#daemon kill [name]
[22;37m           Kills all daemons or daemons with matching name.

[22;37m         [1;37m#daemon list [name]
[22;37m           List all daemons or daemons with matching name.

[22;37m         You can launch tintin and attach the first daemonized instance using
[22;37m         tt++ -R. To attach a named instance use tt++ -R<name>.
[0m
[1;37mRelated[22;37m: script, system and run.[0m

[1;37mCommand[22;37m: #else [1;37m{[22;37mcommands[1;37m}

[22;37m         The else statement should follow an #IF or #ELSEIF statement and is
[22;37m         only called if the proceeding #IF or #ELSEIF is false.

[1;37mExample[22;37m: #if {1d2 == 1} {smile};#else {grin}
[0m
[1;37mRelated[22;37m: case, default, elseif, if, switch and regexp.[0m

[1;37mCommand[22;37m: #gag [1;37m{[22;37mstring[1;37m}

[22;37m         Removes any line that contains the string.

[1;37mComment[22;37m: See '#help action', for more information about triggers.

[22;37m         There are a system messages that can be gagged using gag events.

[1;37mComment[22;37m: You can remove a gag with the #ungag command.
[0m
[1;37mRelated[22;37m: action, highlight, prompt and substitute.[0m

[22;38;5;33m                   ████████┐██████┐███┐   ██┐████████┐██████┐███┐   ██┐
[22;38;5;33m                   └──██┌──┘└─██┌─┘████┐  ██│└──██┌──┘└─██┌─┘████┐  ██│
[22;38;5;33m                      ██│     ██│  ██┌██┐ ██│   ██│     ██│  ██┌██┐ ██│
[22;38;5;33m                      ██│     ██│  ██│└██┐██│   ██│     ██│  ██│└██┐██│
[22;38;5;33m                      ██│   ██████┐██│ └████│   ██│   ██████┐██│ └████│
[22;38;5;33m                      └─┘   └─────┘└─┘  └───┘   └─┘   └─────┘└─┘  └───┘
[22;38;5;33m                                       ██┐      ██┐
[22;38;5;33m                                       ██│      ██│
[22;38;5;33m                                    ████████┐████████┐
[22;38;5;33m                                    └──██┌──┘└──██┌──┘
[22;38;5;33m                                       ██│      ██│
[22;38;5;33m                                       └─┘      └─┘

[22;37m                       [22;38;5;33m([22;38;5;25mT[22;38;5;33m)[22;38;5;25mhe K[22;38;5;33m([22;38;5;25mI[22;38;5;33m)[22;38;5;25mcki[22;38;5;33m([22;38;5;25mN[22;38;5;33m)[22;38;5;25m [22;38;5;33m([22;38;5;25mT)ickin D[22;38;5;33m([22;38;5;25mI[22;38;5;33m)[22;38;5;25mkumud Clie[22;38;5;33m([22;38;5;25mN[22;38;5;33m)[22;38;5;25mt


[22;37m         [1;32mWhat is TinTin++?

[22;37m         TinTin++ is a client program specialized to help playing muds. This is
[22;37m         a souped up version of TINTIN III with many new features.

[22;37m         [1;32mGiving Credit Where Credit is Due

[22;37m         None of this work would be possible, without the work done by Peter
[22;37m         Unold. He was the author of TINTIN III, the base of TinTin++. Hats off
[22;37m         to ya Peter. You started the ball rolling.

[22;37m         [1;32mIntroduction

[22;37m         If you're new to TinTin++ a good place to start is the introduction,
[22;37m         which should be linked below.
[0m
[1;37mRelated[22;37m: introduction[0m

[1;37mCommand[22;37m: #local [1;37m{[22;37mvariable name[1;37m} {[22;37mtext to fill variable[1;37m}

[22;37m         The local command sets a local variable. Unlike a regular variable
[22;37m         a local variable will only stay in memory for the duration of the
[22;37m         event that created it. They are accessed in the same way as a
[22;37m         regular variable.

[22;37m         Commands that store information to a variable will use a local variable
[22;37m         if it exists.

[22;37m         Avoid setting the result variable as local in a function. Similarly,
[22;37m         it is best to avoid setting a local variable that is identical to an
[22;37m         existing regular variable.

[1;37mExample[22;37m: #alias {swap} {#local x %0;#replace x {e} {u};#show $x}

[1;37mComment[22;37m: You can remove a local variable with the #unlocal command.
[0m
[1;37mRelated[22;37m: format, function, math, replace, script and variable.[0m

[1;37mCommand[22;37m: #message [1;37m{[22;37mlistname[1;37m} {[22;37mon[1;37m|[22;37moff[1;37m}

[22;37m         This will show the message status of all your lists if typed without an
[22;37m         argument. If you set for example VARIABLES to OFF you will no longer be
[22;37m         spammed when correctly using the #VARIABLE and #UNVARIABLE commands.
[0m
[1;37mRelated[22;37m: class, debug, ignore, info and kill.[0m

[1;37mCommand[22;37m: #pathdir [1;37m{[22;37mdir[1;37m} {[22;37mreversed dir[1;37m} {[22;37mcoord[1;37m}

[22;37m         By default tintin sets the most commonly used movement commands
[22;37m         meaning you generally don't really have to bother with pathdirs.
[22;37m         Pathdirs are used by the #path and #map commands.

[22;37m         The first argument is a direction, the second argument is the reversed
[22;37m         direction.  The reverse direction of north is south, etc.

[22;37m         The third argument is a spatial coordinate which is a power of two.
[22;37m         'n' is 1, 'e' is 2, 's' is 4, 'w' is '8', 'u' is 16, 'd' is 32. The
[22;37m         exception is for compound directions, whose value should be the sum
[22;37m         of the values of each cardinal direction it is composed of. For
[22;37m         example, 'nw' is the sum of 'n' and 'w' which is 1 + 8, so 'nw'
[22;37m         needs to be given the value of 9. This value is required for the
[22;37m         #map functionality to work properly.

[1;37mExample[22;37m: #pathdir {ue} {dw} {18}
[22;37m         #pathdir {dw} {ue} {40}

[1;37mComment[22;37m: You can remove a pathdir with the #unpathdir command.
[0m
[1;37mRelated[22;37m: map and path.[0m

[1;37mCommand[22;37m: #return [1;37m{[22;37mtext[1;37m}

[22;37m         This command can be used to break out of a command string being
[22;37m         executed.

[22;37m         If used inside a #function you can use #return with an argument to both
[22;37m         break out of the function and set the result variable.
[0m
[1;37mRelated[22;37m: break, continue, foreach, list, loop, parse, repeat and while.[0m

[1;37mSyntax[22;37m:  #[sessionname] [1;37m{[22;37mcommands[1;37m}

[22;37m         You can create multiple sessions with the #session command. By default
[22;37m         only one session is active, meaning commands you input are executed in
[22;37m         the active session. While all sessions receive output, only output sent
[22;37m         to the active session is displayed.

[22;37m         When you create a session with the #session command you must specify a
[22;37m         session name, the session name, prepended with a hashtag, can be used
[22;37m         to activate the session when used without an argument. If an argument
[22;37m         is given it will be executed by that session as a command, the session
[22;37m         will not be activated.

[1;37mExample[22;37m: #ses one tintin.net 23;#ses two tintin.net 23;#one;#two grin

[22;37m         This will create two sessions, the session that was created last (two
[22;37m         in this case) will be automatically activated upon creation. Using
[22;37m         #one, session one is activated. Using #two grin, the grin social will
[22;37m         be executed by session two, session one will remain the active session.

[22;37m         If you send a variable to another session it will be substituted before
[22;37m         being passed. If you want the variable value of the receiving session
[22;37m         to be used you need to use '$${variable}' to properly escape it.

[1;37mSyntax[22;37m:  @[sessionname][1;37m{[22;37msubstitution[1;37m}

[22;37m         If you want to pull the value of a variable from another session you
[22;37m         can do so in a similar way as you would use a #function call. Using
[22;37m         #showme {@two{$test}} in session one would print the value of $test,
[22;37m         as defined by session two.
[0m
[1;37mRelated[22;37m: suspend[0m

[22;37m          TinTin++ will perform various types of substitions as detailed below.

[1;32m          Variables

[1;37m$ & * @[22;37m   All variable and function names must begin with an alphabetic
[22;37m          character, followed by any combination of alphanumeric characters and
[22;37m          underscores.

[1;37m$[22;37m         The dollar sign is used to retrieve the value of a variable.

[1;37m&[22;37m         The ampersand sign is used to retrieve the index of a variable.

[1;37m*[22;37m         The astrix sign is used to retrieve the name of a variable.

[1;37m@[22;37m         The at sign is used for functions.

[1;37m[ ][22;37m       Brackets are used for nested variables which function as an
[22;37m          associative array. Associative arrays are also known as tables and
[22;37m          maps. Regex can be used within brackets to match multiple variables.

[1;37m+ -[22;37m       The plus and minus signs are used to access variables by their index,
[22;37m          with the first variable having index +1, and the last variable
[22;37m          having index -1. Variables are ordered alphanumerically.

[22;37m          All variables and functions can be escaped by doubling the sign,
[22;37m          like $$variable_name or @@function_name. To escape a variable
[22;37m          twice use $$$var_name. One escape is removed each time tintin
[22;37m          needs to substitute a variable or function.

[1;32m          Arguments

[1;37m%0 - %99[22;37m  The percent sign followed by a number is used for arguments by the
[22;37m          following triggers:

[22;37m          alias, action, button, event, function, prompt, and substitute.

[1;37m&0 - &99[22;37m  The ampersand sign followed by a number is used for arguments in the
[22;37m          regex and replace commands.

[22;37m          All trigger and command arguments can be escaped by doubling the
[22;37m          sign like %%1 or &&1. One escape is removed each time tintin
[22;37m          substitutes trigger or command arguments. To escape three times
[22;37m          triple the sign like %%%1, etc.

[1;32m          Colors

[1;37m<000>[22;37m     Three alphanumeric characters encapsulated by the less- and greater-
[22;37m          than signs are used for 4 and 8 bit color codes.

[1;37m<0000>[22;37m    Either a B (background) or F (foreground) followed by three
[22;37m          hexadecimal characters encapsulated by < > signs are used for 12
[22;37m          bit color codes. Requires truecolor capable terminal.

[1;37m<0000000>[22;37m Either a B (background) or F (foreground) followed by six
[22;37m          hexadecimal characters encapsulated by < > signs are used for 24
[22;37m          bit color codes. Requires truecolor capable terminal.

[22;37m          More information is available at #help color.

[1;32m          Escapes

[1;37m\ [22;37m        The back slash is used to escape a character. All available options
[22;37m          are listed at #help escape. Escapes are typically escaped when text
[22;37m          leaves the client, by being sent to a server, the shell, being
[22;37m          displayed on the screen, or being processed as part of a regex.
[22;37m          Escapes try to mimic escapes in PCRE when possible.
[0m
[1;37mRelated[22;37m: characters, colors, escape_codes and pcre.[0m

[22;37m         All available triggers in TinTin++ are displayed when you use the #info
[22;37m         command without an argument. All of them are written to file when you
[22;37m         use the #write command, except commands, histories, and paths.

[22;37m         Triggers can be disabled with the #ignore command. The #message
[22;37m         command can be used to disable messages generated or related to the
[22;37m         corresponding trigger, though this is generally not needed.

[22;37m         The #debug command will generate useful debugging information for the
[22;37m         corresponding trigger when enabled. The #info command can be used on
[22;37m         triggers to generate additional information that might be of use.

[1;37mExample[22;37m: #info event on

[22;37m         When #info event is set to on you will see when most events are raised.
[22;37m         Since this can get rather spammy some of the events won't generate
[22;37m         messages, unless you have an event in the same category set already.

[1;32m         Text triggers

[22;37m         When a block of text arrives from the host it is split into individual
[22;37m         lines, and all action, prompt, gag, substitute, and highlight triggers
[22;37m         are checked for each line. Only one action can trigger per line, while
[22;37m         the other triggers can trigger multiple times.

[1;32m         Packet fragmentation

[22;37m         MUDs that send long blurbs of text, don't have MCCP support, have a bad
[22;37m         connection, or a combination of all three, will deliver broken packets.
[22;37m         This can cause triggers to not fire, as well as displaying problems if
[22;37m         #split is enabled.

[22;37m         To mitigate this you can use [1;37m#config packet_patch 0.5[22;37m.

[22;37m         TinTin++ will automatically enable packet patching if the IAC GA or IAC
[22;37m         EOR telnet sequences are used to mark the end of the prompt. A MUD can
[22;37m         negotiate the EOR option: https://tintin.mudhalla.net/protocols/eor

[22;37m         In addition #prompt can be used to make packet patching less noticable.

[1;32m         Color triggers

[22;37m         By default most color, control, and vt100 codes are stripped from
[22;37m         incoming text before being ran through the trigger engine. To create
[22;37m         a trigger that runs on the unstripped text, the regular expression in
[22;37m         the trigger should start with a ~.

[22;37m         To view control codes you can use [1;37m#config convert_meta on[22;37m which will
[22;37m         translate both input and output codes to PCRE escape sequences.

[1;32m         Multi-line triggers

[22;37m         If an action or substitution contains the \n sequence it will be
[22;37m         turned into a multi-line trigger. A multi-line trigger is executed on
[22;37m         incoming blocks of text from the MUD, and they will not trigger if the
[22;37m         regular expression spans more than one block. You can visualize
[22;37m         incoming blocks by using the following event:

[22;37m         #event {RECEIVED OUTPUT} {#echo <058>%+80h BLOCK}

[22;37m         Since the %* expression does not capture the \n sequence it is required
[22;37m         to use %a to capture multiple lines. To capture the start of the block
[22;37m         use \A and for the end use \Z. You can use ^ and $ to capture the
[22;37m         start and end of a line.

[22;37m         Multi-line triggers trigger before regular triggers. Multiple
[22;37m         multi-line actions can trigger per block, and each multi-line action
[22;37m         can trigger multiple times per block. Packet fragmentation is not
[22;37m         currently handled.

[22;37m         Multi-line triggers are experimental and subject to change.

[1;32m         Input triggers

[22;37m         The alias, history and pathdir triggers are checked for each line of
[22;37m         input. The macro and tab triggers are checked for key presses.

[1;32m         Time triggers

[22;37m         The delay, path, and ticker triggers will execute at a set timed
[22;37m         interval.

[1;32m         Substitution triggers

[22;37m         The function and variable triggers will generally execute right
[22;37m         before the final processing of a line of text.

[1;32m         Mouse triggers

[22;37m         The button trigger is checked for each mouse input. #config mouse
[22;37m         must be set to on to enable mouse tracking.

[1;32m         Event triggers

[22;37m         Events can be used for a wide variety of pre-defined triggers.
[0m
[1;37mRelated[22;37m: pcre, substitutions and escape_codes.[0m

[1;37mCommand[22;37m: #break

[22;37m         The break command can be used inside the #else, #elseif, #if, #foreach,
[22;37m         #loop, #parse, #switch, and #while statements. When #break is found,
[22;37m         tintin will stop executing the statement it is currently in and move on
[22;37m         to the next.

[1;37mExample[22;37m: #while {1} {#math cnt $cnt + 1;#if {$cnt == 20} {#break}}
[0m
[1;37mRelated[22;37m: statements[0m

[1;37mSyntax[22;37m:  <xyz>  with x, y, z being parameters

[22;37m         Parameter 'x': VT100 code

[22;37m         0 - Reset all colors and codes to default
[22;37m         1 - Bold
[22;37m         2 - Dim
[22;37m         3 - Italic
[22;37m         4 - Underscore
[22;37m         5 - Blink
[22;37m         7 - Reverse
[22;37m         8 - Skip (use previous code)

[22;37m         Parameter 'y':  Foreground color
[22;37m         Parameter 'z':  Background color

[22;37m         0 - Black                5 - Magenta
[22;37m         1 - Red                  6 - Cyan
[22;37m         2 - Green                7 - White
[22;37m         3 - Yellow               8 - Skip
[22;37m         4 - Blue                 9 - Default

[1;37mExample[22;37m: #show <125>Bold green on a magenta background.

[22;37m         For xterm 256 colors support use <aaa> to <fff> for RGB foreground
[22;37m         colors and <AAA> to <FFF> for RGB background colors. For the grayscale
[22;37m         foreground colors use <g00> to <g23>, for grayscale background colors
[22;37m         use <G00> to <G23>.

[22;37m         The tertiary colors are as follows:

[22;37m         <acf> - Azure            <afc> - Jade
[22;37m         <caf> - Violet           <cfa> - Lime
[22;37m         <fac> - Pink             <fca> - Orange

[1;37mExample[22;37m: #show <acf>Azure    <afc>Jade     <caf>Violet
[1;37mExample[22;37m: #show <cfa>Lime     <fac>Pink     <fca>Orange

[22;37m         For 12 bit truecolor use <F000> to <FFFF> for foreground colors and
[22;37m         <B000> to <BFFF> for background colors.

[22;37m         For 24 bit truecolor use <F000000> to <FFFFFFF> for foreground
[22;37m         colors and <B000000> to <BFFFFFF> for background colors.

[22;37m         If the color code exceeds your configured color mode it will be
[22;37m         downgraded to the closest match.
[0m
[1;37mRelated[22;37m: characters, coordinates, escape_codes, mathematics and pcre.[0m

[1;37mCommand[22;37m: #debug [1;37m{[22;37mlistname[1;37m} {[22;37mon[1;37m|[22;37moff[1;37m|[22;37mlog[1;37m}

[22;37m         Toggles a list on or off. With no argument it shows your current
[22;37m         settings, as well as the list names that you can debug.

[22;37m         If you for example set ACTIONS to ON you will get debug information
[22;37m         whenever an action is triggered.

[22;37m         #debug {listname} {log} will silently write debugging information to
[22;37m         the log file, you must be logging in order for this to work.

[22;37m         Not every list has debug support yet.
[0m
[1;37mRelated[22;37m: class, ignore, info, kill and message.[0m

[1;37mCommand[22;37m: #elseif [1;37m{[22;37mconditional[1;37m} {[22;37mcommands[1;37m}

[22;37m         The elseif statement should follow an #IF or #ELSEIF statement and is
[22;37m         only called when the statement is true and the proceeding #IF and
[22;37m         #ELSEIF statements are false.

[1;37mExample[22;37m: #if {1d3 == 1} {smirk};#elseif {1d2 == 1} {snicker}
[0m
[1;37mRelated[22;37m: case, default, else, if, switch and regexp.[0m

[22;36m      ####################################################################
[22;36m      #[22;37m                                                                  [22;36m#
[22;36m      #[22;37m                    T I N T I N + +   2.02.42                     [22;36m#
[22;36m      #[22;37m                                                                  [22;36m#
[22;36m      #[22;37m      Code by Peter Unold, Bill Reis, and Igor van den Hoven      [22;36m#
[22;36m      #[22;37m                                                                  [22;36m#
[22;36m      ####################################################################[22m
[0m
[1;37mCommand[22;37m: #info [1;37m{[22;37mlistname[1;37m} {[22;37mLIST[1;37m|[22;37mON[1;37m|[22;37mOFF[1;37m|[22;37mSAVE[1;37m}

[22;37m         Without an argument info displays the settings of every tintin list.

[22;37m         By providing the name of a list and the LIST option it shows all
[22;37m         triggers/variables associated with that list. With the SAVE option
[22;37m         this data is written to the info variable.

[22;37m         #info arguments will show matched trigger arguments.
[22;37m         #info big5toutf will show the big5 to utf8 translation table.
[22;37m         #info cpu will show information about tintin's cpu usage.
[22;37m         #info environ will show the environment variables.
[22;37m         #info input will show information about the input line.
[22;37m         #info matches will show matched command arguments.
[22;37m         #info mccp will show information about data compression.
[22;37m         #info memory will show information about the memory stack.
[22;37m         #info output will show information about the mud output buffers.
[22;37m         #info stack will show the low level debugging stack.
[22;37m         #info session will show information on the session.
[22;37m         #info sessions will show information on all sessions.
[22;37m         #info system will show some system information.
[22;37m         #info tokenizer will show information about the script stack.
[22;37m         #info unicode will show information on the provided character.
[0m
[1;37mRelated[22;37m: class, debug, ignore, kill and message.[0m

[1;37mCommand[22;37m: #log [1;37m{[22;37moption[1;37m} {[22;37margument[1;37m}

[22;37m         The log command allows logging session output to file.

[22;37m         [1;37m#config log_level <low|high>
[22;37m           Default is high. Low, logs server output before triggers.

[22;37m         [1;37m#config log_mode <html|plain|raw>
[22;37m           Set the log's data type to either html, plain, or raw.

[22;37m         [1;37m#log append <filename>
[22;37m           Start logging to the given file, if the file already exists it won't
[22;37m           be overwritten and data will be appended to the end.

[22;37m         [1;37m#log make <directory>
[22;37m           Create the given directory.

[22;37m         [1;37m#log move <filename_1> <filename_2>
[22;37m           Move filename_1 to filename_2. This can be any file and doesn't need
[22;37m           to be a log file.

[22;37m         [1;37m#log overwrite <filename>
[22;37m           Start logging to the given file, if the file already exists it will
[22;37m           be overwritten.

[22;37m         [1;37m#log off
[22;37m           Stop logging.

[22;37m         [1;37m#log remove <filename>
[22;37m           Remove the file. This can be any file and doesn't need to be a log
[22;37m           file.

[22;37m         [1;37m#log timestamp <format>
[22;37m           When set the timestamp will be prepended to each line logged to file.
[22;37m           The format will be formatted as a date using the strftime format
[22;37m           specifiers as described in #help time.
[0m
[1;37mRelated[22;37m: read, scan, textin, time and write.[0m

[22;37m         The #math command supports using 1K, 1M, 1m, and 1u to make large and
[22;37m         small number handling a little easier. These are case sensitive. Only
[22;37m         four symbols are supported to keep false positives to a minimum.

[22;36m         ╭─────────┬────────┬─────────────────────────────────╮
[22;36m         │[1;37m    Name [22;36m│[1;37m Symbol [22;36m│[1;37m                           Factor[22;36m│
[22;36m         ├─────────┼────────┼─────────────────────────────────┤
[22;36m         │[1;37m    Mega [22;36m│[1;37m      M [22;36m│[1;37m                        1 000 000[22;36m│
[22;36m         │[1;37m    Kilo [22;36m│[1;37m      K [22;36m│[1;37m                            1 000[22;36m│
[22;36m         │[1;37m         [22;36m│[1;37m        [22;36m│[1;37m                                 [22;36m│
[22;36m         │[1;37m   milli [22;36m│[1;37m      m [22;36m│[1;37m                            0.001[22;36m│
[22;36m         │[1;37m   micro [22;36m│[1;37m      u [22;36m│[1;37m                        0.000 001[22;36m│
[22;36m         ╰─────────┴────────┴─────────────────────────────────╯
[0m
[1;37mRelated[22;37m: echo, format and math.[0m


[22;37m         A regular expression, regex or regexp is a sequence of characters that
[22;37m         defines a search pattern. Since the 1980s, different syntaxes for
[22;37m         writing regular expressions exist, the two most widely used ones being
[22;37m         the POSIX syntax and the similar but more advanced Perl standard.
[22;37m         TinTin++ supports the Perl standard known as PCRE (Perl Compatible
[22;37m         Regular Expressions).

[22;37m         Regular expressions are an integral part of TinTin++, but keep in mind
[22;37m         that tintin doesn't allow you to use regular expressions directly,
[22;37m         instead it uses a simpler intermediate syntax that still allows more
[22;37m         complex expressions when needed.

[22;37m         Commands that utilize regular expressions are: action, alias, elseif,
[22;37m         gag, grep, highlight, if, kill, local, math, prompt, regexp, replace,
[22;37m         substitute, switch, variable and while. Several other commands use
[22;37m         regular expressions in minor ways. Fortunately the basics are very
[22;37m         easy to learn.

[1;32m         TinTin++ Regular Expression

[22;37m         The following support is available for regular expressions.

[1;37m       ^ [22;37mmatch start of line.
[1;37m       $ [22;37mmatch of end of line.
[1;37m       \ [22;37mescape one character.

[1;37m  %1-%99 [22;37mmatch of any text, stored in the corresponding index.
[1;37m      %0 [22;37mshould be avoided in the regex, contains all matched text.
[1;37m     { } [22;37membed a perl compatible regular expression, matches are stored.
[1;37m   %!{ } [22;37membed a perl compatible regular expression, matches are not stored.

[22;37m         [ ] . + | ( ) ? * are treated as normal text unless used within braces.
[22;37m         Keep in mind that { } is replaced with ( ) automatically unless %!{ }
[22;37m         is used.

[1;37mTinTin++ Description                                      POSIX
[1;37m      %a [22;37mMatch zero or more characters including newlines ([^\0]*?)
[1;37m      %A [22;37mMatch zero or more newlines                      ([\n]*?)
[1;37m      %c [22;37mMatch zero or more ansi color codes              ((?:\e\[[0-9;]*m)*?)
[1;37m      %d [22;37mMatch zero or more digits                        ([0-9]*?)
[1;37m      %D [22;37mMatch zero or more non-digits                    ([^0-9]*?)
[1;37m      %i [22;37mMatches become case insensitive                  (?i)
[1;37m      %I [22;37mMatches become case sensitive (default)          (?-i)
[1;37m      %s [22;37mMatch zero or more spaces                        ([\r\n\t ]*?)
[1;37m      %S [22;37mMatch zero or more non-spaces                    ([^\r\n\t ]*?)
[1;37m      %w [22;37mMatch zero or more word characters               ([A-Za-z0-9_]*?)
[1;37m      %W [22;37mMatch zero or more non-word characters           ([^A-Za-z0-9_]*?)
[1;37m      %? [22;37mMatch zero or one character                      (.??)
[1;37m      %. [22;37mMatch one character                              (.)
[1;37m      %+ [22;37mMatch one or more characters                     (.+?)
[1;37m      %* [22;37mMatch zero or more characters excluding newlines (.*?)

[22;37m         [1;32mRanges

[22;37m         If you want to match 1 digit use %+1d, if you want to match between 3
[22;37m         and 5 spaces use %+3..5s, if you want to match 1 or more word
[22;37m         characters use %+1..w, etc.

[22;37m         [1;32mVariables

[22;37m         If you use %1 in an action to perform a match the matched string is
[22;37m         stored in the %1 variable which can be used in the action body.

[1;37mExample[22;37m: #act {%1 says 'Tickle me'} {tickle %1}

[22;37m         If you use %2 the match is stored in %2, etc. If you use an unnumbered
[22;37m         match like %* or %S the match is stored at the last used index
[22;37m         incremented by one.

[1;37mExample[22;37m: #act {%3 says '%*'} {#if {"%4" == "Tickle me"} {tickle %3}}

[22;37m         The maximum variable index is 99. If you begin an action with %* the
[22;37m         match is stored in %1. You should never use %0 in the trigger part of
[22;37m         an action, when used in the body of an action %0 contains all the parts
[22;37m         of the string that were matched.

[22;37m         To prevent a match from being stored use %!*, %!w, etc.

[22;37m         [1;32mPerl Compatible Regular Expressions

[22;37m         You can embed a PCRE (Perl Compatible Regular Expression) using curley
[22;37m         braces { }, these braces are replaced with parentheses ( ) unless you
[22;37m         use %!{ }.

[22;37m         [1;32mOr

[22;37m         You can separate alternatives within a PCRE using the | character.

[1;37mExample[22;37m: #act {%* raises {his|her|its} eyebrows.} {say 42..}

[22;37m         [1;32mBrackets

[22;37m         You can group alternatives and ranges within a PCRE using brackets.

[1;37mExample[22;37m: #act {%* says 'Who is number {[1-9]}?} {say $number[%2] is number %2}

[22;37m         The example only triggers if someone provides a number between 1 and
[22;37m         9. Any other character will cause the action to not trigger.

[1;37mExample[22;37m: #act {%* says 'Set password to {[^0-9]*}$} {say The password must
[22;37m           contain at least one number, not for security reasons, but just to
[22;37m           annoy you.} {4}

[22;37m         When the ^ character is used within brackets it creates an inverse
[22;37m         search, [^0-9] matches every character except for a number between 0
[22;37m         and 9.

[22;37m         [1;32mQuantification

[22;37m         A quantifier placed after a match specifies how often the match is
[22;37m         allowed to occur.

[1;37m       ? [22;37mrepeat zero or one time.
[1;37m       * [22;37mrepeat zero or multiple times.
[1;37m       + [22;37mrepeat once or multiple times.
[1;37m     {n} [22;37mrepeat exactly n times, n must be a number.
[1;37m    {n,} [22;37mrepeat at least n times, n must be a number.
[1;37m   {n,o} [22;37mrepeat between n and o times, n and o must be a number.

[1;37mExample[22;37m: #act {%* says 'Who is number {[1-9][0-9]{0,2}}?} {Say $number[%2] is
[22;37m           number %2}

[22;37m         The example only triggers if someone provides a number between 1 and
[22;37m         999.

[22;37m         [1;32mParantheses

[22;37m         TinTin Regular Expressions automatically add parenthesis, for example
[22;37m         %* translates to (.*?) in PCRE unless the %* is found at the start or
[22;37m         end of the line, in which cases it translates to (.*). Paranthesis in
[22;37m         PCRE causes a change in execution priority similar to mathematical
[22;37m         expressions, but parentheses also causes the match to be stored to a
[22;37m         variable.

[22;37m         When nesting multiple sets of parentheses each nest is assigned its
[22;37m         numerical variable in order of appearance.

[1;37mExample[22;37m: #act {%* chats '{Mu(ha)+}'} {chat %2ha!}

[22;37m         If someone chats Muha you will chat Muhaha! If someone chats Muhaha
[22;37m         you will chat Muhahaha!

[22;37m         [1;32mLazy vs Greedy

[22;37m         By default regex matches are greedy, meaning {.*} will capture as much
[22;37m         text as possible.

[1;37mExample[22;37m: #regex {bli bla blo} {^{.*} {.*}$} {#show Arg1=(&1) Arg2=(&2)}

[22;37m         This will display: Arg1=(bli bla) Arg2=(blo)

[22;37m         By appending a ? behind a regex it becomes lazy, meaning {.*?} will
[22;37m         capture as little text as possible.

[1;37mExample[22;37m: #regex {bli bla blo} {^{.*?} {.*?}$} {#show Arg1=(&1) Arg2=(&2)}

[22;37m         This will display: Arg1=(bli) Arg2=(bla blo).

[22;37m         [1;32mEscape Codes

[22;37m         PCRE support the following escape codes.

[1;37m    PCRE Description                                    POSIX
[1;37m      \A [22;37mMatch start of string                          ^
[1;37m      \b [22;37mMatch word boundaries                          (^|\r|\n|\t| |$)
[1;37m      \B [22;37mMatch non-word boundaries                      [^\r\n\t ]
[1;37m      \c [22;37mInsert control character                       \c
[1;37m      \d [22;37mMatch digits                                   [0-9]
[1;37m      \D [22;37mMatch non-digits                               [^0-9]
[1;37m      \e [22;37mInsert escape character                        \e
[1;37m      \f [22;37mInsert form feed character                     \f
[1;37m      \n [22;37mInsert line feed character                     \n
[1;37m      \r [22;37mInsert carriage return character               \r
[1;37m      \s [22;37mMatch spaces                                   [\r\n\t ]
[1;37m      \S [22;37mMatch non-spaces                               [^\r\n\t ]
[1;37m      \t [22;37mInsert tab character                           \t
[1;37m      \w [22;37mMatch letters, numbers, and underscores        [A-Za-z0-9_]
[1;37m      \W [22;37mMatch non-letters, numbers, and underscores    [^A-Za-z0-9_]
[1;37m      \x [22;37mInsert hex character                           \x
[1;37m      \Z [22;37mMatch end of string                            $
[1;37m      \\ [22;37mMatch a backslash                              \\

[22;37m         \s matches one space, \s+ matches one or multiple spaces, the use
[22;37m         of {\s+} is required for this sequence to work in tintin, \s by
[22;37m         itself will work outside of a set of braces.

[22;37m         Use \% to forcibly match a literal % character.

[22;37m         [1;32mColor triggers

[22;37m         To make matching easier text triggers (Actions, Gags, Highlights,
[22;37m         Prompts, and Substitutes) have their color codes stripped. If you
[22;37m         want to create a color trigger you must start the triggers with a ~
[22;37m         (tilde). To make escape codes visible use #config {convert meta} on.

[1;37mExample[22;37m: #action {~\e[1;37m%1} {#var roomname %1}

[22;37m         If the room name is the only line on the server in bright white
[22;37m         white color trigger will save the roomname.


[22;37m         This covers the basics. PCRE has more options, most of which are
[22;37m         somewhat obscure, so you'll have to read a PCRE manual for additional
[22;37m         information.
[0m
[1;37mRelated[22;37m: map and path.[0m

[1;37mCommand[22;37m: #run [1;37m{[22;37mname[1;37m} {[22;37mshell command[1;37m} {[22;37mfile[1;37m}

[22;37m         The run command works much like the system command except that it
[22;37m         runs the command in a pseudo terminal. The run command also creates
[22;37m         a session that treats the given shell command as a server. This
[22;37m         allows you to run ssh, as well as any other shell application, with
[22;37m         full tintin scripting capabilities. If a file name is given the file
[22;37m         is loaded prior to execution.

[1;37mExample[22;37m: #run {somewhere} {ssh someone@somewhere.com}
[1;37mExample[22;37m: #run {something} {tail -f chats.log}
[0m
[1;37mRelated[22;37m: all, port, session, sessionname, snoop, ssl and zap.[0m

[1;37mCommand[22;37m: #show [1;37m{[22;37mstring[1;37m} {[22;37mrow[1;37m} {[22;37mcol[1;37m}

[22;37m         Display the string to the terminal, do not send to the server.  Useful
[22;37m         for status, warnings, etc.  The {row} and col number are optional and
[22;37m         work the same way as the row number of the #prompt trigger.

[22;37m         Actions can be triggered by the show command. If you want to avoid
[22;37m         this from happening use: #line ignore #show {<string>}.

[1;37mExample[22;37m: #tick {TICK} {#delay 50 #show 10 SECONDS TO TICK!!!} {60}

[1;37mComment[22;37m: The #prompt helpfile contains more information on using the
[22;37m         option {row} and {col} arguments.
[0m
[1;37mRelated[22;37m: buffer, draw, echo, grep and prompt.[0m

[1;37mCommand[22;37m: #cursor suspend

[22;37m         Temporarily suspends tintin and returns you to your shell.  To
[22;37m         return to tintin, type 'fg' at the shell prompt.

[22;37m         While suspended your tintin sessions will freeze. To keep a
[22;37m         suspended session running use the #daemon command.
[0m
[1;37mRelated[22;37m: sessionname[0m

[1;37mCommand[22;37m: #variable [1;37m{[22;37mvariable name[1;37m} {[22;37mtext to fill variable[1;37m}

[22;37m         Variables differ from the %0-99 arguments in the fact that you can
[22;37m         specify a full word as a variable, and they stay in memory for the
[22;37m         full session unless they are changed.  They can be saved in the
[22;37m         coms file, and can be set to different values if you have two or
[22;37m         more sessions running at the same time.  Variables are global for
[22;37m         each session and can be accessed by adding a $ before the variable
[22;37m         name.

[1;37mExample[22;37m: #alias {target} {#var target %0}
[22;37m         #alias {x}      {kick $target}

[22;37m         The name of a variable must exist of only letters, numbers and
[22;37m         underscores in order to be substituted.  If you do not meet these
[22;37m         requirements do not panic, simply encapsulate the variable in braces:

[1;37mExample[22;37m: #variable {cool website} {https://tintin.mudhalla.net}
[22;37m         #chat I was on ${cool website} yesterday!.

[22;37m         Variables can be escaped by adding additional $ signs.

[1;37mExample[22;37m: #var test 42;#showme $$test

[22;37m         Variables can be nested using brackets:

[1;37mExample[22;37m: #var hp[self] 34;#var hp[target] 46

[22;37m         You can see the first nest of a variable using $variable[+1] and the
[22;37m         last nest using $variable[-1]. Using $variable[-2] will report the
[22;37m         second last variable, and so on. To show all indices use *variable[].
[22;37m         To show all values use $variable[]. To show all values from index 2
[22;37m         through 4 use $variable[+2..4].

[22;37m         Nested variables are also known as tables, table generally being used
[22;37m         to refer to several variables nested within one specific variable.

[22;37m         It's possible to use regular expressions.

[1;37mExample[22;37m: #show {Targets starting with the letter A: $targets[A%*]

[22;37m         To disable using regular expressions start the match with '='.

[1;37mExample[22;37m: #show {A target literally defined as A%*: $targets[=A%*]

[22;37m         To see the internal index of a variable use &<variable name>. To see
[22;37m         the size of a table you would use: &targets[] or &targets[%*]. A non
[22;37m         existent nested variable will report itself as 0.

[1;37mExample[22;37m: #show {Number of targets starting with A: &targets[A%*]

[22;37m         In some scripts you need to know the name of a nested variable. This
[22;37m         is also known as the key, and you can get it using *variable. For
[22;37m         example *target[+1]. To get the first variable's name use *{+1}.

[22;37m         It's also possible to declare a table using brace notation. Using
[22;37m         #var hp[self] 34 is the equivalent of #var {hp} {{self}{34}}. This
[22;37m         also allows merging tables. #var hp[self] 34;#var hp[target] 46 is
[22;37m         the equivalent of #var {hp} {{self}{34} {target}{46}} as well as
[22;37m         #var {hp} {{self}{34}} {{target}{46}} or if you want to get creative
[22;37m         the equivalent of #var hp[self] 34;#var {hp} {$hp} {{target}{46}}.

[1;37mComment[22;37m: You can remove a variable with the #unvariable command.
[0m
[1;37mRelated[22;37m: cat, format, function, local, math, replace and script.[0m

[1;37mCommand[22;37m: #buffer [1;37m{[22;37moption[1;37m} {[22;37margument[1;37m}

[22;37m         The buffer command has various options to manipulate your scrollback
[22;37m         buffer.

[22;37m         The size of the scrollback buffer can be configured using #config
[22;37m         buffer_size <size>. The size must be either 100, 1000, 10000, 100000
[22;37m         or 1000000 lines.

[22;37m         While scrolling through the scrollback buffer incoming text is not
[22;37m         displayed, this can be disabled using #config scroll_lock off. The
[22;37m         scroll lock is automatically disabled when manual input is received,
[22;37m         subsequently #buffer up and down only work properly when used in a
[22;37m         macro or mouse event.

[22;37m         [1;37m#buffer {clear} {[lower bound]} {[upper bound]}

[22;37m         Without an argument this will clear the entire scrollback buffer.
[22;37m         Otherwise it will clear the given range.

[22;37m         Positive numbers are measured from the start of the scrollback buffer,
[22;37m         negative numbers from the end.

[22;37m         [1;37m#buffer {down} [lines]

[22;37m         Moves your scrollback buffer down one page and displays the page. If
[22;37m         a line number is provided it will scroll down the given number of
[22;37m         lines.

[22;37m         [1;37m#buffer {end}

[22;37m         Moves you to the end of your scrollback buffer and displays the page.
[22;37m         Disables scroll lock mode. Most useful when used in a #macro.

[22;37m         [1;37m#buffer {find} {[number]} {<string>} {[variable]}

[22;37m         Moves the buffer to the given string which can contain a regular
[22;37m         expression. Optionally you can provide the number of matches to skip,
[22;37m         allowing you to jump further back in the buffer.

[22;37m         A positive number searches from the start of the buffer, a negative
[22;37m         number from the end. If you provide a variable the location will be
[22;37m         stored and no jump takes place.

[22;37m         [1;37m#buffer {get} {<variable>} {<lower bound>} {[upper bound]}

[22;37m         Allows you to store one or several lines from your scrollback buffer
[22;37m         (including color codes) into a variable. The lower and upper bound
[22;37m         must be between 1 and the size of the buffer. If the upper bound is
[22;37m         omitted the given line is stored as a standard variable. If an upper
[22;37m         bound is given the lines between the two bounds are stored as a list.

[22;37m         Positive numbers are measured from the start of the scrollback buffer,
[22;37m         negative numbers from the end.

[22;37m         [1;37m#buffer {home}

[22;37m         Moves you to the top of your scrollback buffer and displays the page.
[22;37m         Enables scroll lock mode. Most useful when used in a #macro.

[22;37m         [1;37m#buffer {info} {[save]} {[variable]}

[22;37m         Display buffer info, optionally save the data to a variable.

[22;37m         [1;37m#buffer {jump} {<location>}

[22;37m         Moves the buffer to the given location. A positive number jumps from
[22;37m         the start of the buffer, a negative number from the end.

[22;37m         [1;37m#buffer {lock} {on|off}

[22;37m         Toggles the lock on the scrollback buffer. When locked, newly incoming
[22;37m         text won't be displayed, any command will disable the lock, though
[22;37m         several buffer commands will re-enable the lock. When unlocking it'll
[22;37m         move you to the end of your scrollback buffer and display the page.

[22;37m         [1;37m#buffer {refresh}

[22;37m         Marks the buffer as needing to be refreshed, only useful while in
[22;37m         vertical split mode.

[22;37m         [1;37m#buffer {up} [lines]

[22;37m         Moves your scrollback buffer up one page and displays the page.
[22;37m         Enables scroll lock mode. Most useful when used in a #macro. You
[22;37m         can use #buffer {up} {1} to move the scrollback buffer up 1 line.

[22;37m         [1;37m#buffer {write} {<filename>}

[22;37m         Writes the scrollback buffer to the given file.

[1;37mExample[22;37m: #macro {\e[F} {#buffer end}
[0m
[1;37mRelated[22;37m: echo, grep, macro, showme and screen.[0m

[1;37mCommand[22;37m: #commands [1;37m{[22;37mabbreviation[1;37m}

[22;37m         Shows all commands, or all commands starting with the given
[22;37m         abbreviation.
[0m
[1;37mRelated[22;37m: help, info and statements.[0m

[1;37mCommand[22;37m: #default [1;37m{[22;37mcommands[1;37m}

[22;37m         The default command can only be used within the switch command. When
[22;37m         the conditional argument of non of the case commands matches the switch
[22;37m         command's conditional statement the default command is executed.
[0m
[1;37mRelated[22;37m: case, default, else, elseif, if, switch and regexp.[0m

[1;37mCommand[22;37m: #end {<message>}

[22;37m         Terminates tintin and return to unix.  On most systems, ctrl-c has
[22;37m         the same result.

[22;37m         The message is optional and is printed before tintin exits. When
[22;37m         using #end {\} tintin will terminate silently.
[0m
[1;37mRelated[22;37m: zap[0m

[1;37mCommand[22;37m: #grep [1;37m[[22;37mpage[1;37m] {[22;37msearch string[1;37m}

[22;37m         This command allows you to search for matching lines in your scroll
[22;37m         back buffer. The amount of matches shown equals your screen size. If
[22;37m         you want to search back further use the optional page number. You can
[22;37m         use wildcards for better search results. Be aware the search string
[22;37m         is case sensitive, which can be disabled by using %i.

[22;37m         By default grep searches from the end of the scrollback buffer to the
[22;37m         beginning, this can be reversed by using a negative page number.

[1;37mExample[22;37m: #grep Bubba tells you
[22;37m         This will show all occasions where bubba tells you something.
[0m
[1;37mRelated[22;37m: buffer, echo and showme.[0m

[22;37m         On this page you'll find an introduction to using TinTin++. Additional
[22;37m         information can be found in the individual help sections.

[22;37m         [1;32mStarting and Ending

[22;37m         The syntax for starting TinTin++ is: ./tt++ [command file]

[22;37m         Read more about the command file in the files section below. Remember
[22;37m         one thing though. All actions, aliases, substitutions, etc, defined
[22;37m         when starting up TinTin++ are inherited by all sessions.

[22;37m         If you want to exit TinTin++ type '#end' or press ctrl-d on an empty
[22;37m         line.

[22;37m         For the WinTin++ users, if you want to paste text use shift-insert,
[22;37m         text is automatically copied upon selection. This is typical Linux
[22;37m         behavior, but it can take some getting used to.


[22;37m         [1;32mBasic features

[22;37m         I'll start by explaining some of the very basic and important features:

[22;37m         All TinTin++ commands starts with a '#'.

[1;37mExample[22;37m: #help -- #help is a client command, and isn't sent to the server.

[22;37m         All TinTin++ commands can be abbreviated when typed.

[22;37m         #he -- Typing #he is the same as typing #help though it's suggested to
[22;37m         use at least 3 letter abbreviations just in case another command is
[22;37m         added that starts with 'he'.

[22;37m         All commands can be separated with a ';'.

[22;37m         n;l dragon;s;say Dan Dare is back! -- do these 4 commands
[22;37m         There are 3 ways ';'s can be overruled.

[22;37m         \say Hello ;) -- Lines starting with a '\' aren't parsed by TinTin++.
[22;37m         say Hello \;) -- The escape character can escape 1 letter.
[22;37m         #config verbatim on -- Everything is sent as is except '#' commands.

[22;37m         [1;32mConnecting to a server

[1;37mCommand[22;37m: #session [1;37m{[22;37msession name[1;37m} {[22;37mserver address[1;37m} {[22;37mport[1;37m}

[1;37mExample[22;37m: #session someone tintin.sourceforge.net 4321

[22;37m         You can have more than one session, in which case you can switch
[22;37m         between sessions typing #<session name>.

[22;37m         You can get a list of all sessions by typing: #session. The current
[22;37m         active session is marked with (active). Snooped sessions with
[22;37m         (snooped). MCCP sessions (compression) with (mccp 2) and (mccp 3).


[22;37m         [1;32mSplit

[1;37mCommand[22;37m: #split

[22;37m         The split command will create a separated input and output area.

[22;37m         Using the #prompt command you can capture the prompt and place it on
[22;37m         the split line. To get rid of the split interface you can use #unsplit
[22;37m         which will restore the terminal settings to default.


[22;37m         [1;32mAlias

[1;37mCommand[22;37m: #alias [1;37m{[22;37mname[1;37m} {[22;37mcommands[1;37m}

[22;37m         The syntax of the #alias command is almost like alias in csh.
[22;37m         Use this command to define aliases. The variables %0, %1.. %9 contain
[22;37m         the arguments to the aliased command as follows:
[22;37m         the %0 variable contains all the arguments.
[22;37m         the %1 variable contains the 1st argument
[22;37m         ....
[22;37m         the %9 variable contains the 9th argument

[1;37mExample[22;37m: #alias greet say Greetings, most honorable %1

[22;37m         If you want an alias to execute more commands, you must use braces.

[1;37mExample[22;37m: #alias ws [1;37m{[22;37mwake;stand[1;37m}

[22;37m         To delete an alias use the #unalias command.

[22;37m         WARNING! TinTin++ doesn't baby sit, and hence does not check for
[22;37m         recursive aliases! You can avoid recursion by escaping the entire
[22;37m         line.

[1;37mExample[22;37m: #alias put \put %1 in %2

[22;37m         Or by using the send command.

[1;37mExample[22;37m: #alias put #send put %1 in %2


[1;32m         Action

[1;37mCommand[22;37m: #action [1;37m{[22;37maction-text[1;37m} {[22;37mcommands[1;37m}

[22;37m         Use this command to define an action to take place when a particular
[22;37m         text appears on your screen. There are 99 variables you can use as
[22;37m         wildcards in the action-text.

[22;37m         These variables are %1, %2, %3 .... %9, %10, %11 ... %97, %98, %99.

[1;37mExample[22;37m: #action [1;37m{[22;37mYou are hungry[1;37m} {[22;37mget bread bag;eat bread[1;37m}

[1;37mExample[22;37m: #action [1;37m{[22;37m%1 has arrived.[1;37m}[22;37m shake %1 -- shake hands with people arriving.

[1;37mExample[22;37m: #action [1;37m{[22;37m%1 tells you '%2'[1;37m}
[22;37m                   [1;37m{[22;37mtell bob %1 told me '%2'[1;37m}[22;37m -- forward tells.

[1;37mExample[22;37m: #action [1;37m{[22;37mtells you[1;37m}[22;37m #bell -- beep on tell.

[22;37m         You can have TinTin++ ignore actions if you type '#ignore actions on'.

[22;37m         You can see what commands TinTin++ executes when an action triggers
[22;37m         by typing '#debug actions on'.

[22;37m         You can remove actions with the #unaction command.


[22;37m         [1;32mCommand files

[22;37m         When you order TinTin++ to read a command file, it parses all the text
[22;37m         in the file. You can use command files to keep aliases/actions in,
[22;37m         login to a server (name, password etc..) and basically all kinds of
[22;37m         commands.

[22;37m         You can make the command files with either a text editor (suggested),
[22;37m         or use the #write command to write out a file.

[22;37m         Commands for files:

[22;37m         #read filename -- read and execute the file.

[22;37m         #write filename -- write all actions/aliases/substitutes/etc known for
[22;37m         the current session to a file.

[1;37mExample[22;37m:
[22;37m         #session x mymud.com 1234
[22;37m         myname
[22;37m         mypassword
[22;37m         #split
[22;37m         #action {^You are hungry.} {eat bread}

[22;37m         If you save the above five lines to a file named 'mymud.tin' you can
[22;37m         use 'tt++ mymud.tin' to start tintin and execute the file, connecting
[22;37m         you to your mud, logging in, enabling split mode, and setting an action
[22;37m         to eat a bread whenever you go hungry.

[22;37m         [1;32mHighlight

[1;37mCommand[22;37m: #highlight [1;37m{[22;37mtext[1;37m} {[22;37mcolor[1;37m}

[22;37m         This command works a bit like #action. The purpose of this command is
[22;37m         to substitute text from the server with color you provide. This command
[22;37m         is a simplified version of the #substitute command.

[1;37mExample[22;37m: #high [1;37m{[22;37mSnowy[1;37m} {[22;37mlight yellow[1;37m}

[1;37mExample[22;37m: #high [1;37m{[22;37m%*Snowy%*[1;37m} {[22;37mlight yellow[1;37m}

[22;37m         Use #unhigh to delete highlights.


[1;32m         Speedwalk

[22;37m         If you type a command consisting ONLY of letters and numbers n, e, s,
[22;37m         w, u, d - then this command can be interpreted as a serie of movement
[22;37m         commands.

[1;37mExample[22;37m: ssw2n -- go south, south, west, north, north

[22;37m         If you have problems with typing some commands that actually ONLY
[22;37m         consists of these letters, then type them in CAPS. For example when
[22;37m         checking the NEWS or when asked to enter NEW as your name.

[22;37m         You must enable speedwalking with: #config speedwalk on.


[22;37m         [1;32mTicker

[1;37mCommand[22;37m: #ticker [1;37m{[22;37mname[1;37m} {[22;37mcommands[1;37m} {[22;37mseconds[1;37m}

[22;37m         The name can be whatever you want it to be, and is only required for
[22;37m         the unticker command. The commands will be executed every x amount of
[22;37m         seconds, which is specified in the interval part.

[1;37mExample[22;37m: #tick [1;37m{[22;37mtick[1;37m} {[22;37m#delay 50 #show 10 SECONDS TO TICK!;#show TICK!!![1;37m} {[22;37m60[1;37m}

[22;37m         This creates a ticker with the name [1;37m{[22;37mtick[1;37m}[22;37m which will print TICK!!!,
[22;37m         as well as print a warning when the next tick will occure.

[22;37m         You can remove tickers with #untick


[22;37m         [1;32mRepeating Commands

[22;37m         You can repeat a command, the syntax is: #number command

[1;37mExample[22;37m: #5 cackle -- if you just killed bob the wizard.
[1;37mExample[22;37m: #10 [1;37m{[22;37mbuy bread;put bread bag[1;37m}[22;37m -- repeat these 2 commands 10 times.
[1;37mExample[22;37m: #100 ooc w00t w00t!!!!! -- nochannel yourself.


[22;37m         [1;32mHistory

[22;37m         TinTin++ has a limited subset of the csh history features.

[22;37m         ! -- repeat the last command
[22;37m         !cast -- repeat the last command starting with cast
[22;37m         ctrl-r -- enter the reverse history search mode.


[22;37m         [1;32mMap commands

[22;37m         TinTin++ has a powerful highly configurable automapper. Whenever
[22;37m         you type n/ne/e/se/s/sw/w/nw/n/u/d tt++ tries to keep track of your
[22;37m         movement.

[22;37m         Commands for map:

[22;37m         #map create -- create a map.
[22;37m         #map goto 1 -- go to the first room in the map, created by default.
[22;37m         #map map -- display the map.
[22;37m         #map undo -- undo your last map alteration.
[22;37m         #map write <filename> -- save the map to file.
[22;37m         #map read <filename> -- load a map from file.

[22;37m         There are many other map options and it's beyond the scope of this
[22;37m         help section to explain everything there is to know, but I'll give
[22;37m         a set of commands that will get most people started.

[22;37m         #map create
[22;37m         #split 12 1
[22;37m         #map flag unicode on
[22;37m         #map flag vt on
[22;37m         #map goto 1

[22;37m         These commands will create a 12 row vt100 split section at the top of
[22;37m         your screen where a map drawn using unicode characters is displayed.

[1;37mExample[22;37m: #action [1;37m{[22;37mThere is no exit in that direction.[1;37m} {[22;37m#map undo[1;37m}

[22;37m         The map will be automatically created as you move around.


[22;37m         [1;32mHelp

[1;37mCommand[22;37m: #help [1;37m{[22;37msubject[1;37m}

[22;37m         The help command is your friend and contains the same helpfiles
[22;37m         inside TinTin++ as are available on the website. If you type #help
[22;37m         without an argument you will see the various available help subjects
[22;37m         which try to explain the TinTin++ commands and features in greater
[22;37m         detail. Entries in cyan describe commands, while entries in white
[22;37m         describe various features, often in greater detail.


[22;37m         [1;32mThat's all for the introduction, enjoy
[0m
[1;37mRelated[22;37m: characters, colors, coordinates, editing, escape_codes, greeting, keypad, lists, mapping, mathematics, screen_reader, sessionname, speedwalk, statements, suspend and time.[0m

[1;37mCommand[22;37m: #loop [1;37m{[22;37m<start>[1;37m} {[22;37m<finish>[1;37m} {[22;37m<variable>[1;37m} {[22;37mcommands[1;37m}

[22;37m         Like a for statement, loop will loop from start to finish incrementing
[22;37m         or decrementing by 1 each time through.  The value of the loop counter
[22;37m         is stored in the provided variable, which you can use in the commands.

[1;37mExample[22;37m: #loop 1 3 loop {get all $loop.corpse}
[22;37m         This equals 'get all 1.corpse;get all 2.corpse;get all 3.corpse'.

[1;37mExample[22;37m: #loop 3 1 cnt {drop $cnt\.key}
[22;37m         This equals 'drop 3.key;drop 2.key;drop 1.key'.
[0m
[1;37mRelated[22;37m: break, continue, foreach, list, parse, repeat, return and while.[0m


[22;37m         To enable xterm mouse tracking use #CONFIG MOUSE ON.

[22;37m         To see mouse events as they happen use #CONFIG MOUSE INFO. This
[22;37m         information can then be used to create mouse events with the #event
[22;37m         command and buttons with the #button command.

[22;37m         Visual buttons and pop-ups can be drawn on the screen with the #draw
[22;37m         command.

[22;37m         The input field can be changed and renamed using #screen inputregion,
[22;37m         which allows creating named events for enter handling.

[22;37m         Links can be created using the MSLP protocol which will generate link
[22;37m         specific events when clicked.

[22;37m         In order to copy/paste, most terminals require that you press the shift
[22;37m         key during selection.

[0m
[1;37mRelated[22;37m: button, draw, event and MSLP.[0m

[1;37mCommand[22;37m: #port [1;37m{[22;37moption[1;37m} {[22;37margument[1;37m}

[22;37m         [1;37m#port {init} {name} {port} {file}
[22;37m           Initilize a port session.

[22;37m         [1;37m#port {call} {address} {port}
[22;37m           Connect to a remote socket.

[22;37m         [1;37m#port {color} {color names}
[22;37m           Set the default color of port messages.

[22;37m         [1;37m#port {dnd}
[22;37m           Do Not Disturb. Decline new connections

[22;37m         [1;37m#port {group} {name} {group}
[22;37m           Assign a socket group.

[22;37m         [1;37m#port {ignore} {name}
[22;37m           Ignore a socket

[22;37m         [1;37m#port {info}
[22;37m           Display information about the port session.

[22;37m         [1;37m#port {name} {name}
[22;37m           Change socket name.

[22;37m         [1;37m#port {prefix} {text}
[22;37m           Set prefix before each message.

[22;37m         [1;37m#port {send} {name|all} {text}
[22;37m           Send data to socket

[22;37m         [1;37m#port {uninitialize}
[22;37m           Uninitialize the port session.

[22;37m         [1;37m#port {who}
[22;37m           Show all connections

[22;37m         [1;37m#port {zap} {name}
[22;37m           Close a connection

[22;37m         The port command is very similar to chat except that it creates a
[22;37m         new session dedicated to receiving socket connections at the given
[22;37m         port number without built-in support for a communication protocol.

[22;37m         You can init with 0 as the port number to create a dummy session.
[0m
[1;37mRelated[22;37m: all, chat, run, session, sessionname, snoop, ssl and zap.[0m

[1;37mCommand[22;37m: #scan [1;37m{[22;37mabort[1;37m|[22;37mcsv[1;37m|[22;37mtsv[1;37m|[22;37mtxt[1;37m} {[22;37mfilename[1;37m}

[22;37m         The scan command is a file reading utility.

[22;37m         [1;37m#scan {abort}
[22;37m           This command must be called from with a SCAN event and will
[22;37m           abort the scan if one is in progress.

[22;37m         [1;37m#scan {csv} <filename>
[22;37m           The scan csv command reads in a comma separated value file
[22;37m           without printing the content to the screen. Instead it triggers one
[22;37m           of two events.

[22;37m           The SCAN CSV HEADER event is triggered on the first line of the csv
[22;37m           file. The SCAN CSV LINE event is triggered on the second and each
[22;37m           subsequent line of the csv file. The %0 argument contains the entire
[22;37m           line, with  %1 containing the first value, %2 the second value, etc,
[22;37m           all the way up to %99.

[22;37m           Values containing spaces must be surrounded with quotes, keep in mind
[22;37m           newlines within quotes are not supported. Use two quotes to print one
[22;37m           literal quote character.

[1;37m         #scan {dir} <filename> <variable>

[22;37m          The scan dir command will read the given filename or directory and
[22;37m          store any gathered information into the provided variable.

[22;37m         [1;37m#scan {tsv} <filename>

[22;37m           The scan tsv <filename> command reads in a tab separated value file
[22;37m           without printing the content to the screen. Instead it triggers the
[22;37m           SCAN TSV HEADER event for the first line and SCAN TSV LINE for all
[22;37m           subsequent lines.

[22;37m         [1;37m#scan {file} <filename> {commands}

[22;37m           The scan file command reads the given files and executes the
[22;37m            commands argument. &0 contains the raw content of the file and
[22;37m            &1 contains the plain content. &2 contains the raw byte size of the
[22;37m            file and &3 the plain byte size. &5 contains the line count.

[22;37m         [1;37m#scan {txt} <filename>

[22;37m           The scan txt <filename> command reads in a file and sends its content
[22;37m           to the screen as if it was sent by a server. After using scan you can
[22;37m           use page-up and down to view the file.

[22;37m           This command is useful to convert ansi color files to html or viewing
[22;37m           raw log files.

[22;37m           Actions, highlights, and substitutions will trigger as normal, and it
[22;37m           is possible to create an action to execute #scan abort to prematurely
[22;37m           stop the scan.
[0m
[1;37mRelated[22;37m: read and textin.[0m

[1;37mCommand[22;37m: #snoop [1;37m{[22;37msession name[1;37m} {[22;37mon[1;37m|[22;37moff[1;37m|[22;37mscroll[1;37m}

[22;37m         If there are multiple sessions active, this command allows you to
[22;37m         monitor what is going on in the sessions that are not currently active.
[22;37m         The line of text from other sessions will be prefixed by the session's
[22;37m         name.

[22;37m         You can toggle off snoop mode by executing #snoop a second time.

[22;37m         By using the scroll argument you will snoop the session's scroll
[22;37m         region which will overwrite the display of whichever session is active.
[22;37m         You can change the size and location of a session's scroll region by
[22;37m         using the #split and #screen scrollregion commands.
[0m
[1;37mRelated[22;37m: all, port, run, session, sessionname, ssl and zap.[0m

[1;37mCommand[22;37m: #switch [1;37m{[22;37mconditional[1;37m} {[22;37marguments[1;37m}

[22;37m         The switch command works similar to the switch statement in other
[22;37m         languages. When the 'switch' command is encountered its body is parsed
[22;37m         and each 'case' command found will be compared to the conditional
[22;37m         argument of the switch and executed if there is a match.

[22;37m         When comparing strings both the switch and case arguments must be
[22;37m         enclosed in quote characters.

[22;37m         If the 'default' command is found and no 'case' statement has been
[22;37m         matched the default command's argument is executed.

[1;37mExample[22;37m: #switch {1d4} {#case 1 cackle;#case 2 smile;#default giggle}
[0m
[1;37mRelated[22;37m: statements[0m

[1;37mCommand[22;37m: #while [1;37m{[22;37mconditional[1;37m} {[22;37mcommands[1;37m}

[22;37m         This command works similar to a 'while' statement in other languages.

[22;37m         When a 'while' command is encourated, the conditional is evaluated,
[22;37m         and if TRUE (any non-zero result) the commands are executed. The
[22;37m         'while' loop will be repeated indefinitely until the conditional is
[22;37m         FALSE or the #BREAK or #RETURN commands are found.

[22;37m         The 'while' statement is only evaluated if it is read, so you must
[22;37m         nest it inside a trigger, like an alias or action.

[22;37m         The conditional is evaluated exactly the same as in the 'math' command.

[1;37mExample[22;37m: #math cnt 0;#while {$cnt < 20} {#math cnt $cnt + 1;say $cnt}

[1;37mComment[22;37m: See '#help math', for more information.
[0m
[1;37mRelated[22;37m: statements[0m

[1;37mCommand[22;37m: #button [1;37m{[22;37msquare[1;37m} {[22;37mcommands[1;37m} {[22;37mpriority[1;37m}

[22;37m         The #button command can be used to respond with one or several
[22;37m         commands to a mouse click received within the specified square.
[22;37m         The click coordinates are stored in %0-%3 and can be used in the
[22;37m         command part of the button.

[22;37m         The square part should exists of two coordinates defining the
[22;37m         upper left and bottom right corner using row, col, row, col syntax.
[22;37m         The square arguments should be separated by spaces, semi-colons or
[22;37m         braces.

[22;37m         By default the button is set to respond to a mouse button press, to
[22;37m         respond to other button presses you must add a 5th argument to the
[22;37m         square that defines the button press type. You can enable #info
[22;37m         button on to see button events and their type as they happen.

[22;37m         The priority part is optional and determines the priority of the
[22;37m         button, it defaults to 5.

[22;37m         You must enable #config {mouse tracking} on for buttons to work.

[22;37m         This command draws no visible button, you'll have to do so separately
[22;37m         if needed.

[1;37mExample[22;37m: #button {1;1;2;2} {#show You clicked the upper left corner.}

[22;37m         Buttons are ordered alphabetically and only one button can trigger at
[22;37m         a time. To change the order you can assign a priority, which defaults
[22;37m         to 5, with a lower number indicating a higher priority. The priority
[22;37m         can be a floating point number.

[1;37mComment[22;37m: To see button clicks trigger use #info button on.

[1;37mComment[22;37m: You can remove a button with the #unbutton command.
[0m
[1;37mRelated[22;37m: delay, event and ticker.[0m

[1;37mCommand[22;37m: #config [1;37m{[22;37moption[1;37m} {[22;37margument[1;37m}

[22;37m         This allows you to configure various settings, the settings can be
[22;37m         written to file with the #write command.

[22;37m         If you configure the global session (the one you see as you start up
[22;37m         tintin) all sessions started will inherite these settings.

[22;37m         It's advised to make a configuration file to read on startup if you
[22;37m         do not like the default settings.

[22;37m         Use #config without an argument to see your current configuration as
[22;37m         well as a brief explanation of each config option.

[22;37m         The following config options are not listed by default:

[22;37m         #CONFIG {AUTO TAB}      {NUMBER} Buffer lines used for tab completion
[22;37m         #CONFIG {CHILD LOCK}    {ON|OFF} Enable or disable command input.
[22;37m         #CONFIG {CONNECT RETRY} {NUMBER} Seconds to try to connect on failure.
[22;37m         #CONFIG {CONVERT META}  {ON|OFF} Shows color codes and key bindings.
[22;37m         #CONFIG {DEBUG TELNET}  {ON|OFF} Shows telnet negotiations y/n.
[22;37m         #CONFIG {HIBERNATE}     {ON|OFF} Enable or disable low CPU usage mode.
[22;37m         #CONFIG {LOG LEVEL}   {LOW|HIGH} LOW logs server output before triggers.
[22;37m         #CONFIG {INHERITANCE}   {ON|OFF} Session trigger inheritance y/n.
[22;37m         #CONFIG {MCCP}          {ON|OFF} Enable or disable MCCP support.
[22;37m         #CONFIG {RANDOM SEED}   {NUMBER} Seed value used for random numbers.
[22;37m         #CONFIG {TAB WIDTH}     {NUMBER} Number of spaces used for a tab
[22;37m         #CONFIG {TINTIN CHAR}   {SYMBOL} Character used for TinTin++ commands.
[0m
[1;37mRelated[22;37m: class and line.[0m

[1;37mCommand[22;37m: #delay [1;37m{[22;37mseconds[1;37m} {[22;37mcommand[1;37m}
[1;37mCommand[22;37m: #delay [1;37m{[22;37mname[1;37m} {[22;37mcommand[1;37m} {[22;37mseconds[1;37m}

[22;37m         Delay allows you to have tintin wait the given amount of seconds
[22;37m         before executing the given command.

[22;37m         Nanosecond floating point precision is allowed. Delays will fire in
[22;37m         0.01 second intervals.

[22;37m         Named delays are treated as one-shot tickers, see #help tick.

[1;37mExample[22;37m: #delay {1} {#show last};#show first
[22;37m         This will print 'first', and 'last' around one second later.

[1;37mComment[22;37m: If you want to remove a delay with the #undelay command you can add
[22;37m         a name as the first argument, be aware this changes the syntax. If
[22;37m         the name is a number keep in mind that delays with the same numeric
[22;37m         name will not be overwritten
[0m
[1;37mRelated[22;37m: event and ticker.[0m

[22;37m         You may use the escape character \ for various special characters.

[22;37m         \a    beep the terminal.
[22;37m         \c    send a control character, \ca for ctrl-a.
[22;37m         \e    start an escape sequence.
[22;37m         \f    send a form feed.
[22;37m         \n    send a line feed.
[22;37m         \r    send a carriage return.
[22;37m         \t    send a horizontal tab.
[22;37m         \x    print an 8 bit character using hexadecimal, \xFF for example.
[22;37m         \x7B  send the '{' character.
[22;37m         \x7D  send the '}' character.
[22;37m         \u    print a 16 bit unicode character, \uFFFD for example.
[22;37m         \u{}  print a 8-21 bit unicode character, \u{2AF21} for example.
[22;37m         \U    print a 21 bit unicode character, \U02AF21 for example.
[22;37m         \v    send a vertical tab

[22;37m         Ending a line with \ will stop tintin from appending a line feed.
[22;37m         To escape arguments in an alias or action use %%0 %%1 %%2 etc.
[0m
[1;37mRelated[22;37m: characters, colors, coordinates, mathematics and pcre.[0m

[1;37mCommand[22;37m: #help [1;37m{[22;37msubject[1;37m}

[22;37m         Without an argument #help will list all available help subjects.

[22;37m         Using #help %* will display all help entries.
[0m
[1;37mRelated[22;37m: commands, debug, ignore, info, message and statements.[0m

[22;37m         When TinTin++ starts up it sends \e= to the terminal to enable the
[22;37m         terminal's application keypad mode, which can be disabled using #show {\e>}

[1;37m      Configuration A           Configuration B           Configuration C
[22;36m ╭─────┬─────┬─────┬─────╮ ╭─────┬─────┬─────┬─────╮ ╭─────┬─────┬─────┬─────╮
[22;36m │[1;37mnum[22;36m  │[1;37m/[22;36m    │[1;37m*[22;36m    │[1;37m-[22;36m    │ │[1;37mnum[22;36m  │[1;37m/[22;36m    │[1;37m*[22;36m    │[1;37m-[22;36m    │ │[1;37mNum[22;36m  │[1;37mnkp/[22;36m │[1;37mnkp*[22;36m │[1;37mnkp-[22;36m │
[22;36m ├─────┼─────┼─────┼─────┤ ├─────┼─────┼─────┼─────┤ ├─────┼─────┼─────┼─────┤
[22;36m │[1;37m7[22;36m    │[1;37m8[22;36m    │[1;37m9[22;36m    │[1;37m+[22;36m    │ │[1;37mHome[22;36m │[1;37mUp[22;36m   │[1;37mPgUp[22;36m │[1;37m+[22;36m    │ │[1;37mnkp7[22;36m │[1;37mnkp8[22;36m │[1;37mnkp9[22;36m │[1;37mnkp+[22;36m │
[22;36m ├─────┼─────┼─────┤     │ ├─────┼─────┼─────┤     │ ├─────┼─────┼─────┤     │
[22;36m │[1;37m4[22;36m    │[1;37m5[22;36m    │[1;37m6[22;36m    │     │ │[1;37mLeft[22;36m │[1;37mCntr[22;36m │[1;37mRight[22;36m│     │ │[1;37mnkp4[22;36m │[1;37mnkp5[22;36m │[1;37mnkp6[22;36m │     │
[22;36m ├─────┼─────┼─────┼─────┤ ├─────┼─────┼─────┼─────┤ ├─────┼─────┼─────┼─────┤
[22;36m │[1;37m1[22;36m    │[1;37m2[22;36m    │[1;37m3[22;36m    │[1;37mEnter[22;36m│ │[1;37mEnd[22;36m  │[1;37mDown[22;36m │[1;37mPgDn[22;36m │[1;37mEnter[22;36m│ │[1;37mnkp1[22;36m │[1;37mnkp2[22;36m │[1;37mnkp3[22;36m │[1;37mnkpEn[22;36m│
[22;36m ├─────┴─────┼─────┤     │ ├─────┴─────┼─────┤     │ ├─────┴─────┼─────┤     │
[22;36m │[1;37m0[22;36m          │[1;37m.[22;36m    │     │ │[1;37mIns[22;36m        │[1;37mDel[22;36m  │     │ │[1;37mnkp0[22;36m       │[1;37mnkp.[22;36m │     │
[22;36m ╰───────────┴─────┴─────╯ ╰───────────┴─────┴─────╯ ╰───────────┴─────┴─────╯

[22;37m         With keypad mode disabled numlock on will give you configuration A,
[22;37m         and numlock off will give you configuration B. With keypad mode
[22;37m         enabled you'll get configuration C.

[1;37m         Terminals that support keypad mode

[22;37m         Linux Console, PuTTY, MinTTY, Eterm, aterm.

[1;37m         Terminals that do not support keypad mode

[22;37m         RXVT on Cygwin, Windows Console, Gnome Terminal, Konsole.

[1;37m         Peculiar Terminals

[22;37m         RXVT requires turning off numlock to enable configuration C.

[22;37m         Xterm may require disabling Alt/NumLock Modifiers (num-lock) in the
[22;37m         ctrl left-click menu. Or edit ~/.Xresources and add
[22;37m         XTerm*VT100.numLock:false

[22;37m         Mac OS X Terminal requires enabling 'strict vt100 keypad behavior' in
[22;37m         Terminal -> Window Settings -> Emulation.
[0m
[1;37mRelated[22;37m: colors, coordinates, escape_codes, mathematics and pcre.[0m

[1;37mCommand[22;37m: #macro [1;37m{[22;37mkey sequence[1;37m} {[22;37mcommands[1;37m}

[22;37m         Macros allow you to make tintin respond to function keys.

[22;37m         The key sequence sent to the terminal when pressing a function key
[22;37m         differs for every OS and terminal. To find out what sequence is sent
[22;37m         you can enable the CONVERT META config option.

[22;37m         Another option is pressing ctrl-v, which will enable CONVERT META for
[22;37m         the next key pressed.

[22;37m         If you only want a key sequence to trigger at the start of an input
[22;37m         line prefix the key sequence with ^.

[1;37mExample[22;37m: #macro {(press ctrl-v)(press F1)} {#show \e[2J;#buffer lock}
[22;37m         Clear the screen and lock the window when you press F1, useful when the
[22;37m         boss is near.

[1;37mExample[22;37m: #macro {\eOM} {#cursor enter}
[22;37m         Makes the keypad's enter key work as an enter in keypad mode.

[1;37mExample[22;37m: #macro {^nn} {n}
[22;37m         Makes pressing n twice on an empty line execute north.

[1;37mComment[22;37m: Not all terminals properly initialize the keypad key sequences.
[22;37m         If this is the case you can still use the keypad, but instead of the
[22;37m         arrow keys use ctrl b, f, p, and n.

[1;37mComment[22;37m: You can remove a macro with the #unmacro command.
[0m
[1;37mRelated[22;37m: alias, cursor, history, keypad, speedwalk and tab.[0m


[22;37m         MSDP (Mud Server Data Protocol) is part of the #port functionality.
[22;37m         See #help event for additional documentation as all MSDP events are
[22;37m         available as regular events.

[22;37m         Available MSDP events can be queried using the MSDP protocol
[22;37m         as described in the specification.

[22;37m         [1;36mhttps://tintin.mudhalla.net/protocols/msdp
[0m
[1;37mRelated[22;37m: event and port.[0m

[1;37mCommand[22;37m: #prompt [1;37m{[22;37mtext[1;37m} {[22;37mnew text[1;37m} {[22;37mrow #[1;37m} {[22;37mcol #[1;37m}

[22;37m         Prompt is a feature for split window mode, which will capture a line
[22;37m         received from the server and display it on the status bar of your
[22;37m         split screen terminal. You would define <text> and <new text> the
[22;37m         same way as you would with #substitute.

[22;37m         The row number is optional and useful if you use a non standard split
[22;37m         mode. A positive row number draws #row lines from the top while a
[22;37m         negative number draws #row lines from the bottom. Without an argument
[22;37m         #prompt will write to the default split line, which is one row above
[22;37m         the input line, typically at row -2.

[22;37m         If the row number is set to 0, #prompt will behave like #substitute.
[22;37m         This is useful to let tintin know that a prompt was received so you
[22;37m         can use #config packet_patch with minimal interference.

[22;37m         The col number is optional and can be used to set the column index.
[22;37m         A positive col number draws the given number of columns from the left,
[22;37m         while a negative col number draws from the right. If you leave the
[22;37m         col number empty tintin will clear the row before printing at the
[22;37m         start of the row.

[22;37m         The #show command takes a row and col argument as well so it's also
[22;37m         possible to place text on your split lines using #show.

[1;37mExample[22;37m: #prompt {[%*] %* (%*) > } {[%1] %2 (%3)}
[1;37mExample[22;37m: #prompt {[%*] %* (%*) > } {} {-2}
[22;37m         If the <new text> argument is left empty the original text is used,
[22;37m         including colors. Use {\} for a blank line.

[1;37mComment[22;37m: See [1;37m#help split[22;37m for more information on split mode.

[1;37mComment[22;37m: See [1;37m#help substitute[22;37m for more information on text
[22;37m         substitutions.

[1;37mComment[22;37m: You can remove a prompt with the #unprompt command.
[0m
[1;37mRelated[22;37m: action, gag, highlight and substitute.[0m

[1;37mCommand[22;37m: #screen [1;37m{[22;37moption[1;37m} {[22;37margument[1;37m}

[22;37m         The screen command offers a variety of screen manipulation
[22;37m         commands and utilities.

[22;37m         [1;37m#screen blur
[22;37m           Move the terminal to the back of the stack.

[22;37m         [1;37m#screen clear [all|scroll region|square] <args>
[22;37m           Provide 4 arguments defining the top left and bottom right corner
[22;37m           when erasing a square.

[22;37m         [1;37m#screen focus
[22;37m           Move the terminal to the front of the stack.

[22;37m         [1;37m#screen fullscreen [on|off]
[22;37m           Toggles fullscreen mode when used without an argument.

[22;37m         [1;37m#screen get <option> <var>
[22;37m           Get various screen options and save them to <var>. Use #screen
[22;37m           get without an argument to see all available options.

[22;37m         [1;37m#screen info
[22;37m           Debugging information.

[22;37m         [1;37m#screen inputregion <square> [name]
[22;37m           Set the input region. The name argument is optional and can be
[22;37m           used to create named RECEIVED INPUT [NAME] events.

[22;37m         [1;37m#screen load <both|label|title>
[22;37m           Reload the saved title, label, or both.

[22;37m         [1;37m#screen minimize <on|off>
[22;37m           Minimize with on, restore with off.

[22;37m         [1;37m#screen maximize [on|off]
[22;37m           Maximize with on, restore with off.

[22;37m         [1;37m#screen move <height> <width>
[22;37m           Move the upper left corner of the terminal to pixel coordinate.

[22;37m         [1;37m#screen raise <event>
[22;37m           This will raise several screen events with %1 and %2 arguments.

[22;37m         [1;37m#screen refresh
[22;37m           Terminal dependant, may do nothing.

[22;37m         [1;37m#screen rescale <height> <width>
[22;37m           Resize the screen to the given height and width in pixels.

[22;37m         [1;37m#screen resize <rows> <cols>
[22;37m           Resize the screen to the given height and width in characters.

[22;37m         [1;37m#screen save <both|label|title>
[22;37m           Save the title, label, or both.

[22;37m         [1;37m#screen scroll <square>
[22;37m           Set the scrolling region, changes the split setting.

[22;37m         [1;37m#screen set <both|label|title>
[22;37m           Set the title, label, or both. Only title works on Windows.

[22;37m         [1;37m#screen swap
[22;37m           Swap the input and scroll region.
[0m
[1;37mRelated[22;37m: bell[0m

[1;32m         SPEEDWALK V1

[22;37m         Speedwalking allows you to enter multiple directions without using
[22;37m         semicolons. Directions should be prefixed with a number and will be
[22;37m         executed the given number of times.

[22;37m         You can enable speedwalking with #CONFIG {SPEEDWALK} {ON}.

[1;37mExample[22;37m: Without speedwalk, you have to type:
[22;37m         [1;37ms;s;w;w;w;w;w;s;s;s;w;w;w;n;n;w
[22;37m         With speedwalk, you only have to type:
[22;37m         [1;37m2s5w3s3w2nw

[22;37m         [1;32mSPEEDWALK V2

[22;37m         Modern MUDs have increasingly adopted the use of diagonal exits, like
[22;37m         ne, nw, sw, and se. To make accomodations for this the #map and #path
[22;37m         command no longer interpret nesw as a speedwalk and require this to
[22;37m         be written as 1n1e1s1w, which then allows 2ne2e to execute ne;ne;e;e.

[22;37m         Speedwalks entered on the input line continue to use the v1 system.

[22;37m         The #path load command is backward compatible with v1 speedwalks and
[22;37m         to load v2 speedwalks the #path unzip command needs to be used, unless
[22;37m         the speedwalk was saved using #path save in which case a v2 compatible
[22;37m         format is used that can also contain timing data.

[1;37mExample[22;37m: #path unzip 3n1e2nw
[1;37mExample[22;37m: #map move 3ne1d
[0m
[1;37mRelated[22;37m: keypad, mapping and repeat.[0m

[1;37mCommand[22;37m: #system [1;37m{[22;37mcommand[1;37m}

[22;37m         Executes the command specified as a shell command.
[0m
[1;37mRelated[22;37m: detach, script and run.[0m

[1;37mCommand[22;37m: #write [1;37m{[22;37m<filename>[1;37m} {[22;37m[FORCE][1;37m}

[22;37m         Writes all current actions, aliases, subs, highlights, and variables
[22;37m         to a command file, specified by filename.

[22;37m         By default you cannot write to .map files to prevent accidentally
[22;37m         overwriting a map file. Use the FORCE argument to ignore this
[22;37m         protection.
[0m
[1;37mRelated[22;37m: log, read, scan and textin.[0m

[1;37mCommand[22;37m: #case [1;37m{[22;37mconditional[1;37m} {[22;37marguments[1;37m}

[22;37m         The case command must be used within the #switch command. When the
[22;37m         conditional argument of the case command matches the conditional
[22;37m         argument of the switch command the body of the case is executed.

[22;37m         When comparing strings both the switch and case arguments must be
[22;37m         surrounded in quotes.

[1;37mExample[22;37m:

[22;37m         #function {reverse_direction}
[22;37m         {
[22;37m             #switch {"%1"}
[22;37m             {
[22;37m                 #case {"north"} {#return south};
[22;37m                 #case {"east"}  {#return west};
[22;37m                 #case {"south"} {#return north};
[22;37m                 #case {"west"}  {#return east};
[22;37m                 #case {"up"}    {#return down};
[22;37m                 #case {"down"}  {#return up}
[22;37m             }
[22;37m         }

[22;37m         This function returns the reverse direction. @reverse_direction{north}
[22;37m         would return south.
[0m
[1;37mRelated[22;37m: default, statements and switch.[0m

[1;37mCommand[22;37m: #continue

[22;37m         The continue command can be used inside the #FOREACH, #LOOP, #PARSE,
[22;37m         #WHILE and #SWITCH commands. When #CONTINUE is found, tintin will go
[22;37m         to the end of the command and proceed as normal, which may be to
[22;37m         reiterate the command.

[1;37mExample[22;37m: #loop 1 10 cnt {#if {$cnt % 2 == 0} {#continue} {say $cnt}}
[0m
[1;37mRelated[22;37m: break, foreach, list, loop, parse, repeat, return and while.[0m

[1;37mCommand[22;37m: #draw [1;37m[[22;37mline color[1;37m] [[22;37moptions[1;37m] <[22;37mtype[1;37m> <[22;37msquare[1;37m> {[22;37mtext[1;37m}

[22;37m         The draw commands allows you to draw various types of lines and shapes
[22;37m         on the screen. The types with a brief description are provided when you
[22;37m         type #draw without an argument.

[22;37m         The <square> arguments should exists of two coordinates defining the
[22;37m         upper left and bottom right corner using row, col, row, col syntax.

[22;37m         The square arguments can be negative, in which case the coordinates
[22;37m         are calculated from the opposite side of the screen. In the case the
[22;37m         screen is 80 columns wide using #draw box 1 60 10 70 will be the
[22;37m         equivalent of #draw box 1 -21 10 -11, but with different screen
[22;37m         widths the boxes would be drawn in different places.

[22;37m         You can prefix the option with a color code or color name to color the
[22;37m         lines and shapes.

[22;37m         You can further prefix the option as following:

[22;37m         ASCII       draw in ASCII mode.
[22;37m         BALIGN      bottom align text.
[22;37m         BLANKED     blank the lines and corners.
[22;37m         BOTTOM      draw on the bottom side if possible.
[22;37m         BOXED       draw a box along the square.
[22;37m         BUMPED      precede the draw with an enter.
[22;37m         CALIGN      both LALIGN and RALIGN to center text.
[22;37m         CIRCLED     circle the corners.
[22;37m         CONVERT     draw text with meta conversion.
[22;37m         CROSSED     cross the corners.
[22;37m         CURSIVE     draw text with cursive letters.
[22;37m         FAT         draw text with fat letters.
[22;37m         FILLED      fill circles and jewels.
[22;37m         FOREGROUND  draw even if session is not active.
[22;37m         GRID        draw TABLE as a grid.
[22;37m         HORIZONTAL  draw horizontal if possible.
[22;37m         HUGE        draw text in huge letters.
[22;37m         JEWELED     diamond the corners.
[22;37m         JOINTED     draw corners.
[22;37m         LALIGN      left align text.
[22;37m         LEFT        draw on the left side if possible.
[22;37m         NUMBERED    draw numbers instead of lines.
[22;37m         PRUNED      prune the corners.
[22;37m         RALIGN      right align text.
[22;37m         RIGHT       draw on the right side if possible.
[22;37m         ROUNDED     round the corners.
[22;37m         SANSSERIF   draw text with sansserif letters.
[22;37m         SCALED      fit the square to the text size.
[22;37m         SCROLL      draw in the scrolling region.
[22;37m         SHADOWED    shadow HUGE text.
[22;37m         TALIGN      top align text too large to fit.
[22;37m         TEED        tee the corners.
[22;37m         TOP         draw on the top side if possible.
[22;37m         TRACED      trace HUGE text.
[22;37m         TUBED       draw tubes instead of lines.
[22;37m         UALIGN      unwrap and rewrap text.
[22;37m         UNICODE     draw in unicode mode.
[22;37m         VERTICAL    draw vertical if possible.

[22;37m         The following types are available.

[22;37m         [HORIZONTAL] [1;37mBAR[22;37m {<MIN>;<MAX>;[COLOR]}
[22;37m          will draw a bar, use two 256 color codes for a color gradient.
[22;37m         [ASCII|UNICODE|HUGE] [1;37mBOX[22;37m {[TEXT1]} {[TEXT2]}
[22;37m           will draw a box.
[22;37m         [BOXED|FOREGROUND] [1;37mBUFFER
[22;37m           will draw the scrollback buffer.
[22;37m         [BLANKED|CIRCLED|CROSSED|JEWELED|ROUNDED|TEED|PRUNED] [1;37mCORNER
[22;37m           will draw a corner.
[22;37m         [BLANKED|HORIZONTAL|NUMBERED|TUBED|VERTICAL] [1;37mLINE[22;37m {[TEXT]}
[22;37m           will draw a line.
[22;37m         [BOXED] [1;37mMAP
[22;37m           will draw the map
[22;37m         [1;37mRAIN[22;37m {<VARIABLE>} {[SPAWN]} {[FADE]} {[LEGEND]}
[22;37m           will draw digital rain.
[22;37m         [JOINTED|TOP|LEFT|BOTTOM|RIGHT] [1;37mSIDE
[22;37m           will draw one or more sides of a box.
[22;37m         [GRID] [1;37mTABLE[22;37m {[LIST1]} {[LIST2]}
[22;37m          will draw a table.
[22;37m         [CURSIVE|FAT|HUGE|SANSSERIF] [1;37mTILE[22;37m {[TEXT1]} {[TEXT2]}
[22;37m           will draw a tile

[22;37m         All draw types take an optional text argument as long as a valid
[22;37m         square with enough space has been defined. Text is automatically
[22;37m         word wrapped and text formatting can be customized with the
[22;37m         BALIGN, TALIGN, LALIGN, RALIGN, and UALIGN options.

[1;37mExample[22;37m: #draw Blue box 1 1 3 20 {Hello world!}
[0m
[1;37mRelated[22;37m: buffer, echo, grep and showme.[0m

[1;37mCommand[22;37m: #event [1;37m{[22;37mevent type[1;37m}[22;37m [1;37m{[22;37mcommands[1;37m}

[22;37m         Events allow you to create triggers for predetermined client events.

[22;37m         Use #event without an argument to see a list of possible events with
[22;37m         a brief description. Use #event %* to see the current list of defined
[22;37m         events. Use #info {events} {on} to see events get thrown.

[22;37m         Events, like triggers in general, are case sensitive and event names
[22;37m         must be defined using all upper case letters. Only one event can be
[22;37m         defined for each event type.

[22;37m         To enable mouse events use #config mouse_tracking on, to see mouse
[22;37m         events use #config mouse_tracking info.

[22;37m         [1;32mCATCH EVENTS

[22;37m         [1;37mCATCH <EVENT>
[22;37m           Some events can be prefixed with CATCH to interrupt default
[22;37m           behavior.

[22;37m         [1;32mCLASS EVENTS

[22;37m         [1;37mCLASS ACTIVATED [CLASS],  CLASS_CLEAR [CLASS],  CLASS CREATED [CLASS],
[22;37m         [1;37mCLASS DEACTIVATED [CLASS],  CLASS DESTROYED [CLASS],
[22;37m         [1;37mCLASS_LOAD [CLASS]
[22;37m           %0 class name

[22;37m         [1;32mFORMAT EVENTS

[22;37m         [1;37mREFORMAT <MESSAGE>     [22;37mUse #return to change MESSAGE

[22;37m         [1;32mGAG EVENTS

[22;37m         [1;37mGAG <EVENT>
[22;37m           Some events can be prefixed with GAG to gag default system
[22;37m           messages.

[22;37m         [1;32mINPUT EVENTS

[22;37m         [1;37mEDIT STARTED, EDIT FINISHED
[22;37m           %0 name  %1 lines %2 size %3 data

[22;37m         [1;37mHISTORY UPDATE
[22;37m           %0 command

[22;37m         [1;37mRECEIVED KEYPRESS, PROCESSED KEYPRESS
[22;37m           %0 character  %1 unicode index  %2 edit row  %3 edit column

[22;37m         [1;37mRECEIVED INPUT [NAME]
[22;37m           %0 raw text

[22;37m         [1;37mRECEIVED INPUT CHARACTER
[22;37m           %0 character  %1 unicode index  %2 size  %3 width

[22;37m         [1;37mNO SESSION ACTIVE[22;37m      %0 raw text %1 size
[22;37m         [1;37mSEND OUTPUT[22;37m            %0 raw text %1 size
[22;37m         [1;37mSENT OUTPUT[22;37m            %0 raw text %1 size

[22;37m         [1;32mMAP EVENTS

[22;37m         [1;37mEND OF PATH,  END OF RUN, MAP UPDATED VTMAP
[22;37m           These events have no additional arguments.

[22;37m         [1;37mMAP CREATE EXIT, MAP DELETE EXIT
[22;37m           %0 vnum  %1 exit name  %2 exit cmd  %3 exit vnum

[22;37m         [1;37mMAP CREATE ROOM, MAP DELETE ROOM
[22;37m           %0 vnum  %1 name

[22;37m         [1;37mMAP ENTER MAP, MAP EXIT MAP
[22;37m           %0 vnum

[22;37m         [1;37mMAP ENTER ROOM [VNUM]
[22;37m           %0 new vnum  %1 old vnum %2 direction

[22;37m         [1;37mMAP EXIT ROOM [VNUM]
[22;37m           %0 old vnum  %1 new vnum %2 direction

[22;37m         [1;37mMAP FOLLOW MAP
[22;37m           %0 old vnum  %1 new vnum  %2 exit name

[22;37m         [1;37mMAP REGION <MOUSE>, MAP ROOM <MOUSE>
[22;37m           %0 row  %1 col  %2 -row  %3 -col  %4 vnum  %5 info

[22;37m         [1;32mMOUSE EVENTS

[22;37m         [1;37mDOUBLE-CLICKED <MOUSE> [22;37m%0 row %1 col %2 -row %3 -col %4 word %5 line
[22;37m         [1;37mLONG-CLICKED <MOUSE>   [22;37m%0 row %1 col %2 -row %3 -col %4 word %5 line
[22;37m         [1;37mMOVED <MOUSE>          [22;37m%0 row %1 col %2 -row %3 -col %4 word %5 line
[22;37m         [1;37mPRESSED <MOUSE>        [22;37m%0 row %1 col %2 -row %3 -col %4 word %5 line
[22;37m         [1;37mSHORT-CLICKED <MOUSE>  [22;37m%0 row %1 col %2 -row %3 -col %4 word %5 line
[22;37m         [1;37mRELEASED <MOUSE>       [22;37m%0 row %1 col %2 -row %3 -col %4 word %5 line
[22;37m         [1;37mSCROLLED <MOUSE>       [22;37m%0 row %1 col %2 -row %3 -col %4 word %5 line
[22;37m         [1;37mTRIPLE-CLICKED <MOUSE> [22;37m%0 row %1 col %2 -row %3 -col %4 word %5 line

[22;37m         [1;37mMAP <MOUSE EVENT>
[22;37m           Mouse events can be prefixed with MAP to only trigger when the mouse
[22;37m           event occurs inside the VT100 map region.

[22;37m         [1;37mSWIPED [DIR]
[22;37m           %0 dir  %1 button  %2 row  %3 col  %4 -row  %5 -col
[22;37m                              %6 row  %7 col  %8 -row  %9 -col %10 rows %11 cols

[22;37m         [1;32mOUTPUT EVENTS

[22;37m         [1;37mBUFFER UPDATE[22;37m, [1;37mDISPLAY UPDATE
[22;37m           These events have no additional arguments.

[22;37m         [1;37mPROCESSED LINE         [22;37m%0 raw text %1 plain text %2 prompt (0 or 1)

[22;37m         [1;37mRECEIVED LINE          [22;37m%0 raw text %1 plain text
[22;37m         [1;37mRECEIVED OUTPUT        [22;37m%0 raw text %1 plain text
[22;37m         [1;37mRECEIVED PROMPT        [22;37m%0 raw text %1 plain text

[22;37m         [1;32mPORT EVENTS

[22;37m         [1;37mCHAT MESSAGE[22;37m, [1;37mPORT MESSAGE
[22;37m           %0 raw text  %1 plain text

[22;37m         [1;37mPORT CONNECTION        [22;37m%0 name %1 ip %2 port
[22;37m         [1;37mPORT DISCONNECTION     [22;37m%0 name %1 ip %2 port
[22;37m         [1;37mPORT LOG MESSAGE       [22;37m%0 name %1 ip %2 port %3 data %4 plain data
[22;37m         [1;37mPORT RECEIVED MESSAGE  [22;37m%0 name %1 ip %2 port %3 data %4 plain data
[22;37m         [1;37mPORT RECEIVED DATA     [22;37m%0 name %1 ip %2 port %3 data %4 size

[22;37m         [1;32mSCAN EVENTS

[22;37m         [1;37mSCAN CSV HEADER        [22;37m%0 all args %1 arg1 %2 arg2 .. %99 arg99
[22;37m         [1;37mSCAN CSV LINE          [22;37m%0 all args %1 arg1 %2 arg3 .. %99 arg99
[22;37m         [1;37mSCAN TSV HEADER        [22;37m%0 all args %1 arg1 %2 arg3 .. %99 arg99
[22;37m         [1;37mSCAN TSV LINE          [22;37m%0 all args %1 arg1 %2 arg3 .. %99 arg99

[22;37m         [1;32mSCREEN EVENTS

[22;37m         [1;37mSCREEN DIMENSIONS      [22;37m%0 height %1 width
[22;37m         [1;37mSCREEN FOCUS           [22;37m%0 focus (0 or 1)
[22;37m         [1;37mSCREEN LOCATION        [22;37m%0 rows %1 cols  %2 height %3 width

[22;37m         [1;37mSCREEN MOUSE LOCATION
[22;37m           %0 row  %1 col  %2 -row  %3 -col  %4 pix row  %5 pix col
[22;37m           %6 -pix row  %7 -pix col  %8 location

[22;37m         [1;37mSCREEN RESIZE          [22;37m%0 rows %1 cols %2 height %3 width
[22;37m         [1;37mSCREEN SIZE            [22;37m%0 rows %1 cols
[22;37m         [1;37mSCREEN SPLIT           [22;37m%0 top row %1 top col %2 bot row %3 bot col
[22;37m         [1;37mSCREEN UNSPLIT         [22;37m%0 top row %1 top col %2 bot row %3 bot col

[22;37m         [1;32mSESSION EVENTS

[22;37m         [1;37mSESSION ACTIVATED      [22;37m%0 name
[22;37m         [1;37mSESSION CONNECTED      [22;37m%0 name %1 host %2 ip %3 port %4 file
[22;37m         [1;37mSESSION CREATED        [22;37m%0 name %1 host %2 ip %3 port %4 file
[22;37m         [1;37mSESSION DEACTIVATED    [22;37m%0 name
[22;37m         [1;37mSESSION DISCONNECTED   [22;37m%0 name %1 host %2 ip %3 port
[22;37m         [1;37mSESSION TIMED OUT      [22;37m%0 name %1 host %2 ip %3 port

[22;37m         [1;32mSYSTEM EVENTS

[22;37m         [1;37mCONFIG                 [22;37m%0 name %1 value

[22;37m         [1;37mDAEMON ATTACH TIMEOUT  [22;37m%0 file %1 pid
[22;37m         [1;37mDAEMON ATTACHED        [22;37m%0 file %1 pid
[22;37m         [1;37mDAEMON DETACHED        [22;37m%0 file %1 pid
[22;37m         [1;37mPROGRAM START          [22;37m%0 startup arguments
[22;37m         [1;37mPROGRAM TERMINATION    [22;37m%0 goodbye message

[22;37m         [1;37mREAD ERROR             [22;37m%0 filename %1 error message
[22;37m         [1;37mREAD FILE              [22;37m%0 filename
[22;37m         [1;37mWRITE ERROR            [22;37m%0 filename %1 error message
[22;37m         [1;37mWRITE FILE             [22;37m%0 filename

[22;37m         [1;37mSYSTEM CRASH           [22;37m%0 message
[22;37m         [1;37mSYSTEM ERROR           [22;37m%0 name %1 system msg %2 error %3 error msg
[22;37m         [1;37mUNKNOWN COMMAND        [22;37m%0 raw text
[22;37m         [1;37mSIGUSR                 [22;37m%0 signal

[22;37m         [1;32mTELNET EVENTS

[22;37m         [1;37mIAC <EVENT>
[22;37m           IAC TELNET events are made visible using #config telnet info.

[22;37m         [1;37mIAC SB GMCP            [22;37m%0 module    %1 data  %2 plain data
[22;37m         [1;37mIAC SB GMCP <MODULE>   [22;37m             %1 data  %2 plain data
[22;37m         [1;37mIAC SB MSSP            [22;37m%0 variable  %1 data
[22;37m         [1;37mIAC SB MSDP            [22;37m%0 variable  %1 data  %2 plain data
[22;37m         [1;37mIAC SB MSDP [VAR]      [22;37m%0 variable  %1 data  %2 plain data
[22;37m         [1;37mIAC SB NEW-ENVIRON     [22;37m%0 variable  %1 data  %2 plain data
[22;37m         [1;37mIAC SB ZMP <VAR>       [22;37m%0 variable  %1 data
[22;37m         [1;37mIAC SB <VAR>           [22;37m%0 variable  %1 raw data  %2 plain data

[22;37m         [1;32mTIME EVENTS

[22;37m         [1;37mDATE <MONTH-DAY OF MONTH> [HOUR:MINUTE], DAY [DAY OF MONTH],
[22;37m         [1;37mHOUR [HOUR], MONTH [DAY OF MONTH], TIME <HOUR:MINUTE>[:SECOND],
[22;37m         [1;37mWEEK [DAY OF WEEK], YEAR [YEAR]
[22;37m           %0 year  %1 month  %2 day of week  %3 day of month  %4 hour
[22;37m           %5 minute  %6 second

[22;37m         [1;32mVARIABLE EVENTS

[22;37m         [1;37mVARIABLE UPDATE <VAR>  [22;37m%0 name %1 new value %2 path
[22;37m         [1;37mVARIABLE UPDATED <VAR> [22;37m%0 name %1 new value %2 path

[22;37m         [1;32mVT100 EVENTS

[22;37m         [1;37mVT100 SCROLL REGION    [22;37m%0 top row %1 bot row %2 rows %3 cols %4 wrap

[22;37m         To see all events trigger use #info event on. Since this can get
[22;37m         rather spammy it's possible to gag event info messages.

[1;37mExample[22;37m: #event {SESSION CONNECTED} {#read mychar.tin}

[1;37mComment[22;37m: You can remove an event with the #unevent command.
[0m
[1;37mRelated[22;37m: button, delay and ticker.[0m

[1;37mCommand[22;37m: #highlight [1;37m{[22;37mstring[1;37m} {[22;37mcolor names[1;37m} {[22;37mpriority[1;37m}

[22;37m         The highlight command is used to change the color of incoming text.

[22;37m         Available color options are:

[22;37m         reset      - resets the color state to default
[22;37m         light      - turns the color light.
[22;37m         dark       - turns the color dark.
[22;37m         underscore - underscores the text.
[22;37m         blink      - makes the text blink.
[22;37m         reverse    - reverse foreground and background color.
[22;37m         b          - makes next color the background color.

[22;37m         Available color names are:

[22;37m         <abd> - azure                 <acf> - Azure
[22;37m         <aad> - blue                  <aaf> - Blue
[22;37m         <add> - cyan                  <aff> - Cyan
[22;37m         <aaa> - ebony                 <bbb> - Ebony
[22;37m         <ada> - green                 <afa> - Green
[22;37m         <adb> - jade                  <afc> - Jade
[22;37m         <bda> - lime                  <cfa> - Lime
[22;37m         <dad> - magenta               <faf> - Magenta
[22;37m         <dba> - orange                <fca> - Orange
[22;37m         <dab> - pink                  <fac> - Pink
[22;37m         <daa> - red                   <faa> - Red
[22;37m         <ccc> - silver                <eee> - Silver
[22;37m         <cba> - tan                   <eda> - Tan
[22;37m         <bad> - violet                <caf> - Violet
[22;37m         <ddd> - white                 <fff> - White
[22;37m         <dda> - yellow                <ffa> - Yellow

[22;37m         Colors can be provided as either a color code or one of the valid color
[22;37m         names. If the color name is in all lower case a dark color is printed.
[22;37m         If the first letter of the color name is capitalized a light color is
[22;37m         printed.

[22;37m         The %1-99 variables can be used as 'wildcards' that will match with any
[22;37m         text. They are useful for highlighting a complete line. The %0 variable
[22;37m         should never be used in highlights.

[22;37m         You may start the string to highlight with a ^ to only highlight text
[22;37m         if it begins the line.

[22;37m         Besides color names also <abc> color codes can be used.

[1;37mExample[22;37m: #high {Valgar} {reverse underscore Jade}
[22;37m         Prints every occurrence of 'Valgar' in underscored reverse video Jade.

[1;37mExample[22;37m: #high {^You{|r} %1} {light cyan}
[22;37m         Prints every line that starts with 'You' in light cyan.

[1;37mExample[22;37m: #high {Bubba} {red underscore b Green}
[22;37m         Highlights the name Bubba as red underscored text on green background.

[1;37mComment[22;37m: See '#help action', for more information about triggers.

[1;37mComment[22;37m: See '#help substitute', for more advanced color substitution.

[1;37mComment[22;37m: This command only works with ANSI/VT100 terminals or emulators.

[1;37mComment[22;37m: You can remove a highlight with the #unhighlight command.
[0m
[1;37mRelated[22;37m: action, gag, prompt and substitute.[0m

[1;37mCommand[22;37m: #kill [1;37m{[22;37mlist[1;37m} {[22;37mpattern[1;37m}

[22;37m         Without an argument, the kill command clears all lists.  Useful if
[22;37m         you don't want to exit tintin to reload your command files.

[22;37m         With one argument a specific list can be cleared.

[22;37m         With two arguments the triggers in the chosen list that match the
[22;37m         given pattern will be removed.

[1;37mExample[22;37m: #kill alias %*test*
[0m
[1;37mRelated[22;37m: class, debug, ignore, info and message.[0m

[1;37mCommand[22;37m: #map

[22;37m         The map command is the backbone of the auto mapping feature.

[22;37m         [1;37m#map at <exit|vnum> <command>
[22;37m           Execute the command at the given exit or vnum.

[22;37m         [1;37m#map center <x> <y> <z>
[22;37m           Sets displaying center of the map viewer, default is 0 0 0.

[22;37m         [1;37m#map color <field> [value]
[22;37m           Sets the map color for the given color field. Use #map color reset
[22;37m           to restore colors to default.

[22;37m         [1;37m#map create <size>
[22;37m           Creates a new map and room 1. The default size is 50000 rooms.

[22;37m         [1;37m#map destroy {area|world} <name>
[22;37m           Deletes the map or given area.

[22;37m         [1;37m#map delete <exit|vnum>
[22;37m           Deletes the room for the given exit or vnum.

[22;37m         [1;37m#map dig <exit|vnum> [new|<vnum>]
[22;37m           Creates an exit for the given exit name. If no valid exit name
[22;37m           is given or no existing room is found a new room is created.
[22;37m           Useful for portal links and other alternative forms of
[22;37m           transportation. If the 'new' argument is provided all existing
[22;37m           rooms are ignored and a new room is created. If a room vnum is
[22;37m           given as the second argument an exit will be created leading
[22;37m           to the given room vnum. If the room vnum doesn't exist a new
[22;37m           room is created.

[22;37m         [1;37m#map entrance <exit> <option> <arg> [both]
[22;37m           Set the entrance data for the given exit. You must specify a
[22;37m           valid two-way exit for this to work.

[22;37m         [1;37m#map exit <exit> <option> <arg> [both]
[22;37m           Set the exit data. Useful with a closed door where you can
[22;37m           set the exit command: '#map exit e command {open east;e}'.
[22;37m           Use #map exit <exit> for a list of available options.
[22;37m           Use #map exit <exit> save to save all exit data.

[22;37m         [1;37m#map exitflag <exit> <AVOID|BLOCK|HIDE|INVIS> [on|off]
[22;37m           Set exit flags. See #map roomflag for more info.

[22;37m         [1;37m#map explore <exit>
[22;37m           Explores the given exit until a dead end or an
[22;37m           intersection is found. The route is stored in #path and can
[22;37m           subsequently be used with #walk. Useful for long roads.

[22;37m         [1;37m#map find <name> <exits> <desc> <area> <note> <terrain> <flag>
[22;37m           searches for the given room name. If found the shortest path
[22;37m           from your current location to the destination is calculated.
[22;37m           The route is stored in #path and can subsequently be used with
[22;37m           the various #path commands. If #map flag nofollow is set it
[22;37m           will store the exit commands instead of the exit names.

[22;37m           If <exits> is provided all exits must be matched, if
[22;37m           <roomdesc>, <roomarea> or <roomnote> or <roomterrain> or
[22;37m           <roomflag> is provided these are matched as well against the
[22;37m           room to be found.

[22;37m           These search options are also available for the at, delete,
[22;37m           goto, link, list and run commands.

[22;37m         [1;37m#map flag asciigraphics
[22;37m           Takes up more space but draws a more detailed
[22;37m           map that displays the ne se sw nw exits and room symbols.

[22;37m         [1;37m#map flag asciivnums
[22;37m           Display room vnums if asciigraphics is enabled.

[22;37m         [1;37m#map flag direction
[22;37m           Display an arrow on the map showing the direction of your
[22;37m           last movement command.

[22;37m         [1;37m#map flag fast
[22;37m           Limit coordinate searches to a 50 room radius. Useful to
[22;37m           speed up map drawing and room creation on large maps.

[22;37m         [1;37m#map flag nofollow
[22;37m           When you enter movement commands the map will no longer
[22;37m           automatically follow along. Useful for MSDP and GMCP
[22;37m           automapping scripts. When you use #map find in nofollow
[22;37m           mode it will store the exit command instead of the exit
[22;37m           name into the path.

[22;37m         [1;37m#map flag pancake
[22;37m           Makes the map display rooms above or below you. You can use
[22;37m           #map color room [22;38;5;16m[22;38;5;231m for a color gradient.

[22;37m         [1;37m#map flag quiet
[22;37m           Silence map messages when creating new rooms through movement.

[22;37m         [1;37m#map flag static
[22;37m           Will make the map static so new rooms are no longer
[22;37m           created when walking into an unmapped direction. Useful when
[22;37m           you're done mapping and regularly bump into walls accidentally
[22;37m           creating a new room. #map dig etc will still work.

[22;37m         [1;37m#map flag symbolgraphics
[22;37m           Draw a 1x1 map using the defined room symbols.

[22;37m         [1;37m#map flag terrain
[22;37m           Fill up empty space surrounding rooms with terrain symbols

[22;37m         [1;37m#map flag vtgraphics
[22;37m           Enables vt line drawing on some terminals

[22;37m         [1;37m#map flag vtmap
[22;37m           Will enable the vtmap which is shown in the top split
[22;37m           screen if you have one. You can create a 16 rows high top
[22;37m           screen by using '#split 16 1'.

[22;37m         [1;37m#map get <option> <variable> [vnum]
[22;37m           Store a map value into a variable, if no vnum is given the
[22;37m           current room is used. Use 'all' as the option to store all
[22;37m           values as a table.

[22;37m         [1;37m#map get roomexits <variable>
[22;37m           Store all room exits into variable.

[22;37m         [1;37m#map global <room vnum>
[22;37m           Set the vnum of a room that contains global
[22;37m           exits, for example an exit named 'recall' that leads to the
[22;37m           recall location. The room can contain multiple exits, in case
[22;37m           there are multiple commands that are similar to recall.

[22;37m         [1;37m#map goto <room vnum> [dig]
[22;37m           Takes you to the given room vnum, with the
[22;37m           dig argument a new room will be created if none exists.

[22;37m         [1;37m#map goto <name> <exits> <desc> <area> <note> <terrain>
[22;37m           Takes you to the given room name, if you provide exits those
[22;37m           must match.

[22;37m         [1;37m#map info [save]
[22;37m           Gives information about the map and room you are in. If the save
[22;37m           argument is given the map data is saved to the info[map] variable.

[22;37m         [1;37m#map insert <direction> [roomflag]
[22;37m           Insert a room in the given direction. Most useful for inserting
[22;37m           void rooms.

[22;37m         [1;37m#map jump <x> <y> <z>
[22;37m           Jump to the given coordinate, which is relative
[22;37m           to your current room.

[22;37m         [1;37m#map landmark <name> <vnum> [description] [size]
[22;37m           Creates an alias to target the provided room vnum. The
[22;37m           description is optional and should be brief. The size
[22;37m           determines from how many rooms away the landmark can be
[22;37m           seen.

[22;37m         [1;37m#map leave
[22;37m           Makes you leave the map. Useful when entering a maze. You
[22;37m           can return to your last known room using #map return.

[22;37m         [1;37m#map legend <legend> [symbols|reset]
[22;37m         [1;37m#map legend <legend> <index> [symbol]
[22;37m           There are several legends and sub-legends available for
[22;37m           drawing maps to suit personal preference and character sets.
[22;37m           Use #map legend all to see the legend as currently defined.
[22;37m           Use #map legend <legend> <reset> to set the default legend.
[22;37m           Use #map legend <legend> <character list> to create a custom
[22;37m           legend. Custom legends are stored in the map file and can be
[22;37m           saved and loaded using #map write and #map read.

[22;37m         [1;37m#map link <direction> <room name> [both]
[22;37m           Links two rooms. If the both
[22;37m           argument and a valid direction is given the link is two ways.

[22;37m         [1;37m#map list <name> <exits> <desc> <area> <note> <terrain>
[22;37m           Lists all matching rooms and their distance. The following
[22;37m           search keywords are supported.

[22;37m           {distance}    <arg> will list rooms within given distance.
[22;37m           {roomarea}    <arg> will list rooms with matching area name.
[22;37m           {roomdesc}    <arg> will list rooms with matching room desc.
[22;37m           {roomexits}   <arg> will list rooms with identical room exits.
[22;37m                               Use * as an exit to ignore non pathdir exits.
[22;37m           {roomflag}    <arg> will list rooms with matching room flags.
[22;37m           {roomid}      <arg> will list rooms with identical id name.
[22;37m           {roomname}    <arg> will list rooms with matching room name.
[22;37m           {roomnote}    <arg> will list rooms with matching room note.
[22;37m           {roomterrain} <arg> will list rooms with matching room terrain.
[22;37m           {variable}    <arg> will save the output to given variable.

[22;37m         [1;37m#map map <rows> <cols> <append|overwrite|list|variable> <name>
[22;37m           Display a drawing of the map of the given height and width.
[22;37m           All arguments are optional. If {rows} or {cols} are set to {}
[22;37m           or {0} they will use the scrolling window size as the default.
[22;37m           If {rows} or {cols} are a negative number this number is
[22;37m           subtracted from the scrolling window size.

[22;37m         [1;37m#map map <rows> <cols> draw <square>
[22;37m           Display a drawing of the map of the given height and width.
[22;37m           The square argument exists of 4 numbers formulating the top
[22;37m           left corner and bottom right corner of a square.

[22;37m           If you use {append|overwrite} the map is written to the specified
[22;37m           file name which must be given as the 4th argument.
[22;37m           If you use {list|variable} the map is saved to the specified
[22;37m           variable name.

[22;37m         [1;37m#map move <direction>
[22;37m           This does the same as an actual movement command, updating your
[22;37m           location on the map and creating new rooms. Useful when you are
[22;37m           following someone and want the map to follow along. You will need
[22;37m           to create actions using '#map move', for this to work.

[22;37m         [1;37m#map offset <row> <col> <row> <col>
[22;37m           Define the offset of the vtmap as a square. Without an argument
[22;37m           it defaults to the entire top split region.

[22;37m         [1;37m#map read <filename>
[22;37m           Will load the given map file.

[22;37m         [1;37m#map resize <size>
[22;37m           Resize the map, setting the maximum number of rooms.

[22;37m         [1;37m#map return
[22;37m           Returns you to your last known room after leaving the map
[22;37m           or loading a map.

[22;37m         [1;37m#map roomflag <flags> <get|on|off>
[22;37m         
[22;37m         [1;37m#map roomflag avoid
[22;37m           When set, '#map find' will avoid a route leading
[22;37m           through that room. Useful for locked doors, etc.
[22;37m         [1;37m#map roomflag block
[22;37m           When set the automapper will prevent movement into or through
[22;37m           the room. Useful for death traps.
[22;37m         [1;37m#map roomflag hide
[22;37m           When set, '#map' will not display the map beyond
[22;37m           this room. When mapping overlapping areas or areas that aren't
[22;37m           build consistently you need this flag as well to stop
[22;37m           auto-linking, unless you use void rooms.
[22;37m         [1;37m#map roomflag invis
[22;37m           When set the room will be colored with the INVIS color.
[22;37m         [1;37m#map roomflag leave
[22;37m           When entering a room with this flag, you will
[22;37m           automatically leave the map. Useful when set at the entrance
[22;37m           of an unmappable maze.
[22;37m         [1;37m#map roomflag noglobal
[22;37m           This marks a room as not allowing global
[22;37m           transportation, like norecall rooms that block recall.
[22;37m         [1;37m#map roomflag void
[22;37m           When set the room becomes a spacing room that can
[22;37m           be used to connect otherwise overlapping areas. A void room
[22;37m           should only have two exits. When entering a void room you are
[22;37m           moved to the connecting room until you enter a non void room.
[22;37m         [1;37m#map roomflag static
[22;37m           When set the room will no longer be autolinked
[22;37m           when walking around. Useful for mapping mazes.

[22;37m         [1;37m#map run <room name> [delay]
[22;37m           Calculates the shortest path to the destination and walks you
[22;37m           there. The delay is optional and requires using braces. Besides
[22;37m           the room name a list of exits can be provided for more precise
[22;37m           matching.

[22;37m         [1;37m#map set <option> <value> [vnum]
[22;37m           Set a map value for your current room, or given room if a room
[22;37m           vnum is provided.

[22;37m         [1;37m#map sync <filename>
[22;37m           Similar to #map read except the current map won't be unloaded
[22;37m           or overwritten.

[22;37m         [1;37m#map terrain <name> <symbol> [flag]
[22;37m           Set the terrain symbol and flag.

[22;37m         [1;37m#map terrain <name> <symbol> [DENSE|SPARSE|SCANT]
[22;37m           Determine symbol density, omit for the default.

[22;37m         [1;37m#map terrain <name> <symbol> [NARROW|WIDE|VAST]
[22;37m           Determine symbol spread range, omit for the default.

[22;37m         [1;37m#map terrain <name> <symbol> [FADEIN|FADEOUT]
[22;37m           Determine symbol spread density, omit for the default.

[22;37m         [1;37m#map terrain <name> <symbol> [DOUBLE]
[22;37m           You're using two characters for the symbol.

[22;37m         [1;37m#map travel <direction> <delay>
[22;37m           Follows the direction until a dead end or an intersection is
[22;37m           found. Use braces around the direction if you use the delay,
[22;37m           which will add the given delay between movements.
[22;37m           Use #path stop to stop a delayed run.

[22;37m         [1;37m#map undo
[22;37m           Will undo your last move. If this created a room or a link
[22;37m           they will be deleted, otherwise you'll simply move back a
[22;37m           room. Useful if you walked into a non-existent direction.

[22;37m         [1;37m#map uninsert <direction>
[22;37m           Exact opposite of the insert command.

[22;37m         [1;37m#map unlandmark <name>
[22;37m           Removes a landmark.

[22;37m         [1;37m#map unlink <direction> [both]
[22;37m           Will remove the exit, this isn't two way so you can have the
[22;37m           properly display no exit rooms and mazes.
[22;37m           If you use the both argument the exit is removed two-ways.

[22;37m         [1;37m#map unterrain <name>
[22;37m           Removes a terrain.

[22;37m         [1;37m#map update [now]
[22;37m           Sets the vtmap to update within the next 0.1 seconds, or
[22;37m           instantly with the now argument.

[22;37m         [1;37m#map vnum <low> [high]
[22;37m           Change the room vnum to the given number, if a range is
[22;37m           provided the first available room in that range is selected.

[22;37m         [1;37m#map write <filename> [force]
[22;37m           Will save the map, if you want to save a map to a .tin file
[22;37m           you must provide the {force} argument.
[0m
[1;37mRelated[22;37m: path, pathdir and speedwalk.[0m


[22;37m         MSLP (Mud Server Link Protocol) requires enabling #config mouse on,
[22;37m         and creating the appropriate LINK events.

[22;37m         The simplest link can be created by surrounding a keyword with the
[22;37m         \e[4m and \e[24m tags.

[1;37mExample[22;37m: #substitute {\b{n|e|s|w|u|d}\b} {\e[4m%1\e[24m}

[22;37m         This would display 'Exits: n, e, w.' as 'Exits: [4mn[24m, [4me[24m, [4mw[24m.'.

[22;37m         When clicked this would trigger the PRESSED LINK MOUSE BUTTON ONE
[22;37m         event of which %4 will hold the link command and %6 holds the
[22;37m         link name, which in the case of a simple link will be empty.

[1;37mExample[22;37m: #event {PRESSED LINK MOUSE BUTTON ONE} {#send {%4}}

[22;37m         Keep in mind that if you change PRESSED to DOUBLE-CLICKED the link
[22;37m         will only work if the text does not scroll in between clicks.

[22;37m         If you want to create a complex link use an OSC code.

[1;37mExample[22;37m: #sub {\bsmurf\b} {\e]68;1;;say I hate smurfs!\a\e[4m%0\e[24m}

[22;37m         If you have the LINK event of the previous example set, the %4
[22;37m         argument will contain 'say I hate smurfs!'.

[1;37mExample[22;37m: #sub {\bgoblin\b} {\e]68;1;SEND;kill goblin\a\e[4m%0\e[24m}

[22;37m         Notice the previous instance of ;; has been replaced with ;SEND;
[22;37m         which will name the link. This will generate a named event.

[1;37mExample[22;37m: #event {PRESSED LINK SEND MOUSE BUTTON ONE} {#send {%4}}

[22;37m         By naming links you can organize things a little bit better instead
[22;37m         of tunneling everything through the same event.

[22;37m         Keep in mind that the server is allowed to use \e]68;1;\a as well,
[22;37m         subsequently various security measures are in place.

[22;37m         To create secure links, which are filtered out when sent by a server,
[22;37m         you need to use \e]68;2;\a, and they instead trigger the SECURE LINK
[22;37m         event.

[22;37m         To create a link that is not underlined, use \e]4;24m text \e]24m.

[1;37mExample[22;37m: #sub {%* tells %*} {\e]68;2;EXEC;#cursor set tell %1 \a\e[4;24m%0\e[24m}
[1;37m       [22;37m  #event {PRESSED SECURE LINK EXEC MOUSE BUTTON ONE} {%4}

[22;37m         This would make you start a reply when clicking on a tell.

[1;37mWebsite[22;37m: https://tintin.mudhalla.net/protocols/mslp
[0m
[1;37mRelated[22;37m: event and port.[0m

[1;37mCommand[22;37m: #read [1;37m{[22;37mfilename[1;37m}

[22;37m         Reads a commands file into memory.  The coms file is merged in with
[22;37m         the currently loaded commands.  Duplicate commands are overwritten.

[22;37m         If you uses braces, { and } you can use several lines for 1 commands.
[22;37m         This however means you must always match every { with a } for the read
[22;37m         command to work.

[22;37m         You can comment out triggers using /* text */
[0m
[1;37mRelated[22;37m: log, scan, textin and write.[0m

[1;37mCommand[22;37m: #config [1;37m{[22;37mSCREEN READER[1;37m} {[22;37mON|OFF[1;37m}

[22;37m         Screen reader mode is enabled by using #config screen on. One purpose
[22;37m         of the screen reader mode is to report to servers that a screen reader
[22;37m         is being used by utilizing the MTTS standard. The MTTS specification
[22;37m         is available at:

[22;37m         https://tintin.mudhalla.net/protocols/mtts

[22;37m         With the screen reader mode enabled TinTin++ will try to remove or
[22;37m         alter visual elements where possible.
[0m
[1;37mRelated[22;37m: config[0m

[1;37mCommand[22;37m: #split [1;37m{[22;37mtop bar[1;37m} {[22;37mbottom bar[1;37m} {[22;37mleft bar[1;37m} {[22;37mright bar[1;37m} {[22;37minput bar[1;37m}

[22;37m         This option requires for your terminal to support VT100 emulation.

[22;37m         #split allows the creation of a top status bar, a left and right status
[22;37m         bar, a scrolling region, a bottom status bar, and an input line.

[22;37m         [22;36m╭────────────────────────────────╮
[22;37m         [22;36m│[1;37m            top bar      [22;36m       │
[22;37m         [22;36m├──────┬──────────────────┬──────┤
[22;37m         [22;36m│[1;37m left [22;36m│[1;37m    scrolling     [22;36m│[1;37m right[22;36m│
[22;37m         [22;36m│[1;37m bar  [22;36m│[1;37m     region       [22;36m│[1;37m  bar [22;36m│
[22;37m         [22;36m├──────┴──────────────────┴──────┤
[22;37m         [22;36m│[1;37m           bottom bar    [22;36m       │
[22;37m         [22;36m├────────────────────────────────┤
[22;37m         [22;36m│[1;37m           input bar     [22;36m       │
[22;37m         [22;36m╰────────────────────────────────╯

[22;37m         By default the bottom status bar is filled with dashes --- and
[22;37m         subsequently it is also known as the split line. The scrolling
[22;37m         region is also known as the main screen and this is where all
[22;37m         incoming text is displayed by default.

[22;37m         If you use #split without an argument it will set the height of the
[22;37m         top status bar to 0 lines and the bottom status bar to 1 line.

[22;37m         If you use #split with one argument it will set the height of the top
[22;37m         status bar to the given number of lines and the bottom status bar will
[22;37m         be set to 1 line.

[22;37m         If you use two arguments the first argument is the height of the top
[22;37m         status bar and the second argument the height of the bottom status bar.

[22;37m         The third and fourth argument are optional and default to 0.

[22;37m         The fifth argument is optional and sets the size of the input bar, it
[22;37m         defaults to 1.

[22;37m         It is possible to use negative arguments in which case the bar width
[22;37m         defines the minimum width of the scrolling region.

[1;37mExample[22;37m: #split 0 0
[22;37m         This will create a split screen with just a scrolling region and an
[22;37m         input line. Great for the minimalist.

[1;37mExample[22;37m: #split 1 1 0 -80
[22;37m         This will create a split screen with a single line top and bottom
[22;37m         bar. The left bar has a width of 0 while the right bar will be of
[22;37m         variable width. If for example the screen is 100 columns wide, 80
[22;37m         columns will be used for the scrolling region, leaving a right bar
[22;37m         with a width of 20 columns.

[22;37m         To avoid displaying problems it's suggesed to use #prompt to capture
[22;37m         the prompt sent by the MUD.

[1;37mComment[22;37m: You can display text on the split line(s) with the #prompt and
[22;37m         #show {line} {row} commands.

[1;37mComment[22;37m: You can remove split mode with the #unsplit command.
[0m
[1;37mRelated[22;37m: echo, prompt and showme.[0m

[1;37mCommand[22;37m: #tab [1;37m{[22;37mword[1;37m}

[22;37m         Adds a word to the tab completion list, alphabetically sorted.

[22;37m         If no tabs are defined tintin will use the scrollback buffer for auto
[22;37m         tab completion.

[22;37m         Tabbing behavior can be modified with the #cursor tab command which
[22;37m         by default is bound to the tab key.

[1;37mExample[22;37m: #macro \t #cursor tab list scrollback caseless forward

[1;37mComment[22;37m: You can remove a tab with the #untab command.
[0m
[1;37mRelated[22;37m: alias, cursor, history, keypad, macro and speedwalk.[0m

[1;37mCommand[22;37m: #zap {[session]}

[22;37m         Kill your current session.  If there is no current session, it will
[22;37m         cause the program to terminate. If you provide an argument it'll zap
[22;37m         the given session instead.
[0m
[1;37mRelated[22;37m: all, port, run, session, sessionname, snoop and ssl.[0m

#log off
